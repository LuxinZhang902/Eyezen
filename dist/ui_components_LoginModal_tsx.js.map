{"version":3,"file":"ui_components_LoginModal_tsx.js","mappingssources":["webpack://eyezen-chrome-extension/./ui/components/LoginModal.tsx"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nconst LoginModal = ({ isVisible, onClose, onLogin, onSignup }) => {\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [name, setName] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [emailSent, setEmailSent] = useState(false);\n    const [verificationCode, setVerificationCode] = useState('');\n    const [showVerification, setShowVerification] = useState(false);\n    const [generatedCode, setGeneratedCode] = useState('');\n    const [showForgotPassword, setShowForgotPassword] = useState(false);\n    const [resetCode, setResetCode] = useState('');\n    const [newPassword, setNewPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [showPasswordReset, setShowPasswordReset] = useState(false);\n    if (!isVisible)\n        return null;\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        setError('');\n        try {\n            if (isLoginMode) {\n                // Regular login with password\n                await onLogin(email, password);\n                onClose();\n            }\n            else {\n                // Signup - send verification email\n                await new Promise(resolve => setTimeout(resolve, 1500));\n                // Generate a random 6-digit code\n                const code = Math.floor(100000 + Math.random() * 900000).toString();\n                setGeneratedCode(code);\n                setEmailSent(true);\n                setShowVerification(true);\n                console.log(`Verification code sent to ${email}: ${code}`);\n            }\n        }\n        catch (err) {\n            setError(err instanceof Error ? err.message : 'An error occurred');\n        }\n        finally {\n            setIsLoading(false);\n        }\n    };\n    const handleVerificationSubmit = async (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        setError('');\n        try {\n            if (verificationCode === generatedCode) {\n                // Code is correct, complete signup\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                onSignup(email, password, name);\n                onClose();\n                resetForm();\n            }\n            else {\n                setError('Invalid verification code. Please try again.');\n            }\n        }\n        catch (err) {\n            setError(err instanceof Error ? err.message : 'An error occurred');\n        }\n        finally {\n            setIsLoading(false);\n        }\n    };\n    const handleForgotPassword = async (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        setError('');\n        try {\n            // Check if user exists\n            const result = await chrome.storage.local.get(['eyezen_users']);\n            const users = result.eyezen_users || {};\n            if (!users[email]) {\n                throw new Error('No account found with this email address.');\n            }\n            // Generate reset code\n            await new Promise(resolve => setTimeout(resolve, 1500));\n            const code = Math.floor(100000 + Math.random() * 900000).toString();\n            setResetCode(code);\n            setShowPasswordReset(true);\n            console.log(`Password reset code sent to ${email}: ${code}`);\n        }\n        catch (err) {\n            setError(err instanceof Error ? err.message : 'An error occurred');\n        }\n        finally {\n            setIsLoading(false);\n        }\n    };\n    const handlePasswordReset = async (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        setError('');\n        try {\n            if (verificationCode !== resetCode) {\n                throw new Error('Invalid reset code. Please try again.');\n            }\n            if (newPassword.length < 6) {\n                throw new Error('Password must be at least 6 characters long.');\n            }\n            if (newPassword !== confirmPassword) {\n                throw new Error('Passwords do not match.');\n            }\n            // Update user password\n            const result = await chrome.storage.local.get(['eyezen_users']);\n            const users = result.eyezen_users || {};\n            if (users[email]) {\n                users[email].password = newPassword;\n                await chrome.storage.local.set({ 'eyezen_users': users });\n                // Reset form and show success\n                resetForm();\n                setShowForgotPassword(false);\n                alert('Password reset successfully! You can now login with your new password.');\n            }\n        }\n        catch (err) {\n            setError(err instanceof Error ? err.message : 'An error occurred');\n        }\n        finally {\n            setIsLoading(false);\n        }\n    };\n    const resetForm = () => {\n        setEmail('');\n        setPassword('');\n        setName('');\n        setError('');\n        setEmailSent(false);\n        setVerificationCode('');\n        setShowVerification(false);\n        setGeneratedCode('');\n        setShowForgotPassword(false);\n        setResetCode('');\n        setNewPassword('');\n        setConfirmPassword('');\n        setShowPasswordReset(false);\n    };\n    const switchMode = () => {\n        setIsLoginMode(!isLoginMode);\n        resetForm();\n    };\n    const handleBackdropClick = (e) => {\n        // Only close if clicking the backdrop, not the modal content\n        if (e.target === e.currentTarget) {\n            onClose();\n        }\n    };\n    return (_jsx(\"div\", { className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\", onClick: handleBackdropClick, children: _jsxs(\"div\", { className: \"bg-white rounded-lg p-6 w-80 max-w-sm mx-4\", onClick: (e) => e.stopPropagation(), children: [_jsxs(\"div\", { className: \"flex justify-between items-center mb-4\", children: [_jsx(\"h2\", { className: \"text-xl font-bold text-gray-800\", children: showForgotPassword ? 'Reset Password' : (isLoginMode ? 'Login' : 'Sign Up') }), _jsx(\"button\", { onClick: onClose, className: \"text-gray-500 hover:text-gray-700 text-xl\", children: \"\\u00D7\" })] }), emailSent && !showVerification ? (_jsxs(\"div\", { className: \"text-center py-8\", children: [_jsx(\"div\", { className: \"mb-4\", children: _jsx(\"svg\", { className: \"w-16 h-16 text-green-500 mx-auto\", fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", children: _jsx(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" }) }) }), _jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900 mb-2\", children: \"Email Sent!\" }), _jsxs(\"p\", { className: \"text-gray-600 mb-4\", children: [\"We've sent a verification code to \", _jsx(\"strong\", { children: email }), \". Please check your inbox for the 6-digit code.\"] }), _jsx(\"p\", { className: \"text-sm text-gray-500\", children: \"Don't see the email? Check your spam folder.\" }), _jsx(\"button\", { onClick: () => setShowVerification(true), className: \"mt-4 bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition-colors\", children: \"Enter Verification Code\" })] })) : showVerification ? (_jsxs(\"form\", { onSubmit: handleVerificationSubmit, className: \"space-y-4\", children: [_jsxs(\"div\", { className: \"text-center mb-4\", children: [_jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900 mb-2\", children: \"Enter Verification Code\" }), _jsxs(\"p\", { className: \"text-gray-600 text-sm\", children: [\"We sent a 6-digit code to \", _jsx(\"strong\", { children: email })] })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Verification Code\" }), _jsx(\"input\", { type: \"text\", value: verificationCode, onChange: (e) => setVerificationCode(e.target.value.replace(/\\D/g, '').slice(0, 6)), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent text-center text-lg tracking-widest\", required: true, placeholder: \"000000\", maxLength: 6, disabled: isLoading })] }), error && (_jsx(\"div\", { className: \"text-red-600 text-sm bg-red-50 p-2 rounded\", children: error })), _jsxs(\"div\", { className: \"flex space-x-3\", children: [_jsx(\"button\", { type: \"button\", onClick: () => {\n                                        setShowVerification(false);\n                                        setEmailSent(false);\n                                        setVerificationCode('');\n                                        setError('');\n                                    }, className: \"flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition-colors\", children: \"Back\" }), _jsx(\"button\", { type: \"submit\", disabled: isLoading || verificationCode.length !== 6, className: \"flex-1 bg-gradient-to-r from-green-400 to-emerald-400 text-white py-2 px-4 rounded-md hover:from-green-500 hover:to-emerald-500 transition-all duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\", children: isLoading ? (_jsxs(_Fragment, { children: [_jsxs(\"svg\", { className: \"animate-spin -ml-1 mr-3 h-5 w-5 text-white\", xmlns: \"http://www.w3.org/2000/svg\", fill: \"none\", viewBox: \"0 0 24 24\", children: [_jsx(\"circle\", { className: \"opacity-25\", cx: \"12\", cy: \"12\", r: \"10\", stroke: \"currentColor\", strokeWidth: \"4\" }), _jsx(\"path\", { className: \"opacity-75\", fill: \"currentColor\", d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" })] }), \"Verifying...\"] })) : ('Verify & Sign Up') })] })] })) : showForgotPassword && !showPasswordReset ? (_jsxs(\"form\", { onSubmit: handleForgotPassword, className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Email Address\" }), _jsx(\"input\", { type: \"email\", value: email, onChange: (e) => setEmail(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: true, placeholder: \"Enter your email address\", disabled: isLoading })] }), error && (_jsx(\"div\", { className: \"text-red-600 text-sm bg-red-50 p-2 rounded\", children: error })), _jsxs(\"div\", { className: \"flex space-x-3\", children: [_jsx(\"button\", { type: \"button\", onClick: () => {\n                                        setShowForgotPassword(false);\n                                        setError('');\n                                    }, className: \"flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition-colors\", children: \"Back\" }), _jsx(\"button\", { type: \"submit\", disabled: isLoading || !email, className: \"flex-1 bg-gradient-to-r from-green-400 to-emerald-400 text-white py-2 px-4 rounded-md hover:from-green-500 hover:to-emerald-500 transition-all duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\", children: isLoading ? (_jsxs(_Fragment, { children: [_jsxs(\"svg\", { className: \"animate-spin -ml-1 mr-3 h-5 w-5 text-white\", xmlns: \"http://www.w3.org/2000/svg\", fill: \"none\", viewBox: \"0 0 24 24\", children: [_jsx(\"circle\", { className: \"opacity-25\", cx: \"12\", cy: \"12\", r: \"10\", stroke: \"currentColor\", strokeWidth: \"4\" }), _jsx(\"path\", { className: \"opacity-75\", fill: \"currentColor\", d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" })] }), \"Sending Code...\"] })) : ('Send Reset Code') })] })] })) : showPasswordReset ? (_jsxs(\"form\", { onSubmit: handlePasswordReset, className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Reset Code\" }), _jsx(\"input\", { type: \"text\", value: verificationCode, onChange: (e) => {\n                                        const value = e.target.value.replace(/\\D/g, '').slice(0, 6);\n                                        setVerificationCode(value);\n                                    }, className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent text-center text-lg tracking-widest\", placeholder: \"000000\", maxLength: 6, required: true, disabled: isLoading })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"New Password\" }), _jsx(\"input\", { type: \"password\", value: newPassword, onChange: (e) => setNewPassword(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: true, placeholder: \"Enter new password\", minLength: 6, disabled: isLoading })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Confirm New Password\" }), _jsx(\"input\", { type: \"password\", value: confirmPassword, onChange: (e) => setConfirmPassword(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: true, placeholder: \"Confirm new password\", minLength: 6, disabled: isLoading })] }), error && (_jsx(\"div\", { className: \"text-red-600 text-sm bg-red-50 p-2 rounded\", children: error })), _jsxs(\"div\", { className: \"flex space-x-3\", children: [_jsx(\"button\", { type: \"button\", onClick: () => {\n                                        setShowPasswordReset(false);\n                                        setShowForgotPassword(true);\n                                        setError('');\n                                    }, className: \"flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition-colors\", children: \"Back\" }), _jsx(\"button\", { type: \"submit\", disabled: isLoading || verificationCode.length !== 6 || !newPassword || !confirmPassword, className: \"flex-1 bg-gradient-to-r from-green-400 to-emerald-400 text-white py-2 px-4 rounded-md hover:from-green-500 hover:to-emerald-500 transition-all duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\", children: isLoading ? (_jsxs(_Fragment, { children: [_jsxs(\"svg\", { className: \"animate-spin -ml-1 mr-3 h-5 w-5 text-white\", xmlns: \"http://www.w3.org/2000/svg\", fill: \"none\", viewBox: \"0 0 24 24\", children: [_jsx(\"circle\", { className: \"opacity-25\", cx: \"12\", cy: \"12\", r: \"10\", stroke: \"currentColor\", strokeWidth: \"4\" }), _jsx(\"path\", { className: \"opacity-75\", fill: \"currentColor\", d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" })] }), \"Resetting...\"] })) : ('Reset Password') })] })] })) : (_jsxs(\"form\", { onSubmit: handleSubmit, className: \"space-y-4\", children: [!isLoginMode && (_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Name\" }), _jsx(\"input\", { type: \"text\", value: name, onChange: (e) => setName(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: !isLoginMode, placeholder: \"Enter your name\", disabled: isLoading })] })), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Email\" }), _jsx(\"input\", { type: \"email\", value: email, onChange: (e) => setEmail(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: true, placeholder: \"Enter your email\", disabled: isLoading })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Password\" }), _jsx(\"input\", { type: \"password\", value: password, onChange: (e) => setPassword(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: true, placeholder: \"Enter your password\", minLength: 6, disabled: isLoading })] }), error && (_jsx(\"div\", { className: \"text-red-600 text-sm bg-red-50 p-2 rounded\", children: error })), _jsx(\"button\", { type: \"submit\", disabled: isLoading, className: \"w-full bg-gradient-to-r from-green-400 to-emerald-400 text-white py-2 px-4 rounded-md hover:from-green-500 hover:to-emerald-500 transition-all duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\", children: isLoading ? (_jsxs(_Fragment, { children: [_jsxs(\"svg\", { className: \"animate-spin -ml-1 mr-3 h-5 w-5 text-white\", xmlns: \"http://www.w3.org/2000/svg\", fill: \"none\", viewBox: \"0 0 24 24\", children: [_jsx(\"circle\", { className: \"opacity-25\", cx: \"12\", cy: \"12\", r: \"10\", stroke: \"currentColor\", strokeWidth: \"4\" }), _jsx(\"path\", { className: \"opacity-75\", fill: \"currentColor\", d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" })] }), isLoginMode ? 'Logging in...' : 'Creating Account...'] })) : (isLoginMode ? 'Login' : 'Sign Up') }), isLoginMode && (_jsx(\"div\", { className: \"mt-3 text-center\", children: _jsx(\"button\", { type: \"button\", onClick: () => setShowForgotPassword(true), className: \"text-green-600 hover:text-green-700 text-sm font-medium\", children: \"Forgot Password?\" }) }))] })), !showVerification && !showForgotPassword && (_jsx(\"div\", { className: \"mt-4 text-center\", children: _jsx(\"button\", { onClick: switchMode, className: \"text-green-600 hover:text-green-700 text-sm font-medium\", children: isLoginMode ? \"Don't have an account? Sign up\" : \"Already have an account? Login\" }) }))] }) }));\n};\nexport default LoginModal;\n"],"names":[],"sourceRoot":""}
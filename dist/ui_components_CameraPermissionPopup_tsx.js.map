{"version":3,"file":"ui_components_CameraPermissionPopup_tsx.js","mappingssources":["webpack://eyezen-chrome-extension/./ui/components/CameraPermissionPopup.tsx"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * Camera Permission Popup Component\n * Shows when camera access is detected, allows user to approve or reject\n */\nimport { useState, useEffect } from 'react';\nimport { ChromeStorageService } from '../../core/storage/index';\nconst CameraPermissionPopup = ({ isVisible, onApprove, onReject, onClose }) => {\n    const [isAnimating, setIsAnimating] = useState(false);\n    useEffect(() => {\n        if (isVisible) {\n            setIsAnimating(true);\n        }\n    }, [isVisible]);\n    const handleApprove = async () => {\n        try {\n            // Create offscreen document if it doesn't exist\n            const existingContexts = await chrome.runtime.getContexts({});\n            const offscreenDocument = existingContexts.find((context) => context.contextType === 'OFFSCREEN_DOCUMENT');\n            if (!offscreenDocument) {\n                await chrome.offscreen.createDocument({\n                    url: 'offscreen.html',\n                    reasons: [chrome.offscreen.Reason.USER_MEDIA],\n                    justification: 'Camera access for eye health monitoring'\n                });\n            }\n            // Request camera access through offscreen document\n            const response = await new Promise((resolve, reject) => {\n                chrome.runtime.sendMessage({ type: 'REQUEST_CAMERA' }, (response) => {\n                    if (chrome.runtime.lastError) {\n                        reject(new Error(chrome.runtime.lastError.message));\n                        return;\n                    }\n                    if (!response) {\n                        reject(new Error('No response received from offscreen document'));\n                        return;\n                    }\n                    resolve(response);\n                });\n            });\n            if (response.success) {\n                // Update settings to allow camera access\n                await ChromeStorageService.updateSettings({\n                    cameraEnabled: true,\n                    metricsOnly: false // Allow full functionality\n                });\n                console.log('Camera activated successfully');\n                // Show success message\n                alert('ðŸŽ‰ Camera access granted! Full AI-powered eye health monitoring is now active.');\n                onApprove();\n            }\n            else {\n                // Handle camera permission denial gracefully\n                console.warn('Camera access denied:', response.error);\n                // Update settings to metrics-only mode\n                await ChromeStorageService.updateSettings({\n                    cameraEnabled: false,\n                    metricsOnly: true\n                });\n                // Show user-friendly message with instructions\n                const message = `${response.error || 'Camera access was denied.'}\n\nðŸ’¡ To enable full AI features later:\n1. Click the camera icon in Chrome's address bar\n2. Select \"Always allow\" for camera access\n3. Reload the extension\n\nFor now, you can still use basic timer reminders.`;\n                alert(message);\n                onApprove(); // Still call onApprove to close the popup\n            }\n            // Don't auto-close the popup - let parent component handle it\n        }\n        catch (error) {\n            console.error('Failed to approve camera access:', error);\n            // Still call onApprove even if camera permission fails\n            onApprove();\n        }\n    };\n    const handleReject = async () => {\n        try {\n            // Update settings to restrict features to alarm-only\n            await ChromeStorageService.updateSettings({\n                cameraEnabled: false,\n                metricsOnly: true // Restrict to basic functionality\n            });\n            onReject();\n            handleClose();\n        }\n        catch (error) {\n            console.error('Failed to reject camera access:', error);\n        }\n    };\n    const handleClose = () => {\n        setIsAnimating(false);\n        setTimeout(() => {\n            onClose();\n        }, 200);\n    };\n    if (!isVisible)\n        return null;\n    return (_jsxs(\"div\", { className: \"fixed inset-0 z-50 flex items-center justify-center\", children: [_jsx(\"div\", { className: `absolute inset-0 bg-black transition-opacity duration-200 ${isAnimating ? 'opacity-50' : 'opacity-0'}`, onClick: handleClose }), _jsxs(\"div\", { className: `relative bg-white rounded-lg shadow-xl max-w-sm mx-4 transform transition-all duration-200 ${isAnimating ? 'scale-100 opacity-100' : 'scale-95 opacity-0'}`, children: [_jsx(\"div\", { className: \"bg-gradient-to-r from-green-600 to-emerald-600 text-white p-4 rounded-t-lg\", children: _jsxs(\"div\", { className: \"flex items-center space-x-3\", children: [_jsx(\"div\", { className: \"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\", children: _jsx(\"svg\", { className: \"w-5 h-5\", fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", children: _jsx(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\" }) }) }), _jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-lg font-semibold\", children: \"Camera Permission Required\" }), _jsx(\"p\", { className: \"text-sm opacity-90\", children: \"EyeZen wants to monitor your eye health\" })] })] }) }), _jsxs(\"div\", { className: \"p-6\", children: [_jsxs(\"div\", { className: \"mb-4\", children: [_jsxs(\"div\", { className: \"flex items-center space-x-2 mb-3\", children: [_jsx(\"div\", { className: \"w-3 h-3 bg-orange-500 rounded-full animate-pulse\" }), _jsx(\"span\", { className: \"text-sm font-medium text-gray-700\", children: \"Camera access needed for AI features\" })] }), _jsxs(\"p\", { className: \"text-gray-600 text-sm leading-relaxed\", children: [_jsx(\"strong\", { children: \"Your privacy is protected\" }), \" - no video is recorded or transmitted, and images are only used for one-time analysis.\"] }), _jsx(\"button\", { onClick: () => alert('ðŸ“¹ Detailed Setup Instructions:\\n\\n1. Click \"Allow Camera Access\" below\\n2. Chrome will show a permission dialog\\n3. Select \"Always allow\" for reliable access\\n4. If dialog closes quickly, manually set permissions:\\n   â€¢ Click camera icon in Chrome address bar\\n   â€¢ Select \"Always allow\"\\n   â€¢ Refresh this extension'), className: \"text-xs text-blue-600 hover:text-blue-800 underline mt-2 transition-colors\", children: \"View detailed setup instructions \\u2192\" })] }), _jsx(\"div\", { className: \"bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4\", children: _jsxs(\"div\", { className: \"flex items-start space-x-2\", children: [_jsx(\"svg\", { className: \"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\", fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", children: _jsx(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" }) }), _jsxs(\"div\", { children: [_jsx(\"p\", { className: \"text-sm font-medium text-blue-800\", children: \"Next Step\" }), _jsx(\"p\", { className: \"text-xs text-blue-700 mt-1\", children: \"Clicking \\\"Allow Camera Access\\\" will show Chrome's permission dialog. Choose \\\"Allow\\\" there to enable full AI features.\" })] })] }) })] }), _jsxs(\"div\", { className: \"px-6 pb-6\", children: [_jsxs(\"div\", { className: \"flex space-x-3\", children: [_jsx(\"button\", { onClick: handleReject, className: \"flex-1 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-300\", children: \"Reject\" }), _jsx(\"button\", { onClick: handleApprove, className: \"flex-1 px-4 py-2 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-green-300\", children: \"Allow Camera Access\" })] }), _jsx(\"p\", { className: \"text-xs text-gray-500 text-center mt-3 whitespace-nowrap\", children: \"You can change this setting anytime in the extension options.\" })] })] })] }));\n};\nexport default CameraPermissionPopup;\n"],"names":[],"sourceRoot":""}
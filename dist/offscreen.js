let cameraStream=null,cvWorker=null,videoElement=null,canvas=null,isProcessing=!1,frameCount=0;async function initializeCVProcessing(e){try{console.log("üîß Initializing CV processing pipeline..."),console.log("üìπ Creating video element..."),videoElement=document.createElement("video"),videoElement.srcObject=e,videoElement.autoplay=!0,videoElement.muted=!0,videoElement.playsInline=!0,console.log("üé® Creating canvas for frame extraction..."),canvas=document.createElement("canvas"),canvas.getContext("2d",{willReadFrequently:!0}),console.log("‚è≥ Waiting for video metadata..."),await new Promise(e=>{videoElement.onloadedmetadata=async()=>{console.log(`üìê Video dimensions: ${videoElement.videoWidth}x${videoElement.videoHeight}`),canvas.width=videoElement.videoWidth,canvas.height=videoElement.videoHeight;try{await videoElement.play(),console.log("‚ñ∂Ô∏è Video started playing successfully")}catch(e){console.warn("‚ö†Ô∏è Video autoplay failed, but this is normal in some contexts:",e)}e()}}),console.log("üë∑ Creating CV worker..."),cvWorker=new Worker("/cv-worker.js"),cvWorker.onmessage=e=>{const{type:o,data:a}=e.data;switch(console.log("üì® Received message from CV worker:",o,a),o){case"ready":console.log("CV Worker initialized:",a.message),cvWorker.postMessage({type:"start"}),startFrameProcessing();break;case"metrics":console.log("üëÅÔ∏è Eye metrics received:",a),chrome.runtime.sendMessage({type:"EYE_METRICS",data:a});break;case"error":console.error("CV Worker error:",a.error)}},cvWorker.onerror=e=>{console.error("‚ùå CV Worker error:",e)},console.log("üöÄ Initializing worker with MediaPipe model..."),cvWorker.postMessage({type:"init",data:{modelPath:"/assets/wasm/face_landmarker.task"}}),console.log("‚úÖ CV processing initialized successfully")}catch(e){console.error("‚ùå Failed to initialize CV processing:",e)}}function startFrameProcessing(){if(!videoElement||!canvas||!cvWorker||isProcessing)return void console.log("‚ö†Ô∏è Cannot start frame processing - missing components or already processing");console.log("üé¨ Starting timer-based frame processing every 2 minutes..."),isProcessing=!0;const e=canvas.getContext("2d",{willReadFrequently:!0});!function o(){if(isProcessing&&videoElement&&!videoElement.paused&&!videoElement.ended){try{if(videoElement.readyState<2)return console.log("‚ö†Ô∏è Video not ready yet, skipping detection"),void setTimeout(o,12e4);frameCount++,frameCount%5==0&&console.log(`üîç Detection active - Frame ${frameCount} processed (1-minute intervals)`),e.drawImage(videoElement,0,0,canvas.width,canvas.height);const a=e.getImageData(0,0,canvas.width,canvas.height);cvWorker.postMessage({type:"process",data:{imageData:a,timestamp:performance.now()}}),e.clearRect(0,0,canvas.width,canvas.height)}catch(e){console.error("‚ùå Frame processing error:",e)}setTimeout(o,6e4)}else console.log("‚èπÔ∏è Frame processing stopped")}()}async function stopCVProcessing(){isProcessing=!1,cvWorker&&(cvWorker.postMessage({type:"cleanup"}),cvWorker.terminate(),cvWorker=null),videoElement&&(videoElement.srcObject=null,videoElement=null),canvas&&(canvas.getContext("2d",{willReadFrequently:!0}).clearRect(0,0,canvas.width,canvas.height),canvas=null),console.log("CV processing stopped and cleaned up")}console.log("üé¨ Offscreen document message listener registered"),chrome.runtime.onMessage.addListener((e,o,a)=>{if("DOWNLOAD_FRAME"===e.type)return console.log("üì∏ Processing DOWNLOAD_FRAME message in offscreen document"),(async()=>{try{if(!videoElement||!canvas)return void a({success:!1,error:"Camera not initialized"});const e=async()=>new Promise((e,o)=>{const a=()=>{videoElement.readyState>=2&&videoElement.currentTime>0?e(!0):videoElement.readyState>=2?setTimeout(a,100):setTimeout(a,200)};a(),setTimeout(()=>{o(new Error("Video failed to start playing within 5 seconds"))},5e3)});return await e(),console.log(`üìπ Video ready: readyState=${videoElement.readyState}, currentTime=${videoElement.currentTime}, dimensions=${videoElement.videoWidth}x${videoElement.videoHeight}`),canvas.getContext("2d",{willReadFrequently:!0}).drawImage(videoElement,0,0,canvas.width,canvas.height),canvas.toBlob(e=>{if(e){const o=URL.createObjectURL(e),s=`eyezen-frame-${(new Date).toISOString().replace(/[:.]/g,"-")}.png`,t=document.createElement("a");t.href=o,t.download=s,document.body.appendChild(t),t.click(),document.body.removeChild(t),URL.revokeObjectURL(o),console.log("üì∏ Frame downloaded successfully:",s),a({success:!0,filename:s})}else a({success:!1,error:"Failed to create image blob"})},"image/png"),!0}catch(e){console.error("‚ùå Failed to download frame:",e),a({success:!1,error:e.message})}})(),!0;if("REQUEST_CAMERA"===e.type)return console.log("üé• Processing REQUEST_CAMERA message in offscreen document"),(async()=>{try{cameraStream=await navigator.mediaDevices.getUserMedia({video:!0}),globalThis.eyeZenCameraStream=cameraStream,await initializeCVProcessing(cameraStream),console.log("‚úÖ Camera activated successfully in offscreen document with CV processing"),a({success:!0,message:"Camera access granted"})}catch(e){console.error("Failed to access camera in offscreen document:",e);let o=e.message;"NotAllowedError"===e.name||e.message.includes("Permission denied")||e.message.includes("Permission dismissed")?o="Camera permission was denied. Please allow camera access to use eye health monitoring features.":"NotFoundError"===e.name?o="No camera found. Please connect a camera to use this feature.":"NotReadableError"===e.name&&(o="Camera is already in use by another application."),a({success:!1,error:o})}})(),!0;if("STOP_CAMERA"===e.type)return(async()=>{try{await stopCVProcessing(),cameraStream&&(cameraStream.getTracks().forEach(e=>e.stop()),cameraStream=null,globalThis.eyeZenCameraStream=null,console.log("Camera stopped in offscreen document")),a({success:!0,message:"Camera stopped"})}catch(e){console.error("Failed to stop camera:",e),a({success:!1,error:e.message})}})(),!0;if("GET_CAMERA_STATE"===e.type){const e=null!==cameraStream&&cameraStream.getTracks().some(e=>"live"===e.readyState);return a({isActive:e}),!0}}),console.log("Offscreen document loaded for camera access and CV processing");
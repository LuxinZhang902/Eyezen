let cameraStream=null,cvWorker=null,videoElement=null,canvas=null,isProcessing=!1;async function initializeCVProcessing(e){try{console.log("🔧 Initializing CV processing pipeline..."),console.log("📹 Creating video element..."),videoElement=document.createElement("video"),videoElement.srcObject=e,videoElement.autoplay=!0,videoElement.muted=!0,videoElement.playsInline=!0,console.log("🎨 Creating canvas for frame extraction..."),canvas=document.createElement("canvas"),canvas.getContext("2d"),console.log("⏳ Waiting for video metadata..."),await new Promise(e=>{videoElement.onloadedmetadata=()=>{console.log(`📐 Video dimensions: ${videoElement.videoWidth}x${videoElement.videoHeight}`),canvas.width=videoElement.videoWidth,canvas.height=videoElement.videoHeight,e()}}),console.log("👷 Creating CV worker..."),cvWorker=new Worker("/cv-worker.js"),cvWorker.onmessage=e=>{const{type:a,data:o}=e.data;switch(console.log("📨 Received message from CV worker:",a,o),a){case"ready":console.log("CV Worker initialized:",o.message),startFrameProcessing();break;case"metrics":console.log("👁️ Eye metrics received:",o),chrome.runtime.sendMessage({type:"EYE_METRICS",data:o});break;case"error":console.error("CV Worker error:",o.error)}},cvWorker.onerror=e=>{console.error("❌ CV Worker error:",e)},console.log("🚀 Initializing worker with MediaPipe model..."),cvWorker.postMessage({type:"init",data:{modelPath:"/assets/wasm/face_landmarker.task"}}),console.log("✅ CV processing initialized successfully")}catch(e){console.error("❌ Failed to initialize CV processing:",e)}}function startFrameProcessing(){if(!videoElement||!canvas||!cvWorker||isProcessing)return void console.log("⚠️ Cannot start frame processing - missing components or already processing");console.log("🎬 Starting frame processing loop at ~15 FPS..."),isProcessing=!0;const e=canvas.getContext("2d");let a=0;!function o(){if(isProcessing&&videoElement&&!videoElement.paused&&!videoElement.ended){try{e.drawImage(videoElement,0,0,canvas.width,canvas.height);const o=e.getImageData(0,0,canvas.width,canvas.height);a++,a%15==0&&console.log(`🎞️ Processing frame ${a} (${canvas.width}x${canvas.height})`),cvWorker.postMessage({type:"process",data:{imageData:o,timestamp:performance.now()}}),e.clearRect(0,0,canvas.width,canvas.height)}catch(e){console.error("❌ Frame processing error:",e)}setTimeout(o,67)}else console.log("⏹️ Frame processing stopped")}()}async function stopCVProcessing(){isProcessing=!1,cvWorker&&(cvWorker.postMessage({type:"cleanup"}),cvWorker.terminate(),cvWorker=null),videoElement&&(videoElement.srcObject=null,videoElement=null),canvas&&(canvas.getContext("2d").clearRect(0,0,canvas.width,canvas.height),canvas=null),console.log("CV processing stopped and cleaned up")}chrome.runtime.onMessage.addListener((e,a,o)=>{if("REQUEST_CAMERA"===e.type)return(async()=>{try{cameraStream=await navigator.mediaDevices.getUserMedia({video:!0}),globalThis.eyeZenCameraStream=cameraStream,console.log("🎥 Camera stream obtained, initializing CV processing..."),await initializeCVProcessing(cameraStream),console.log("✅ Camera activated successfully in offscreen document with CV processing"),o({success:!0,message:"Camera access granted"})}catch(e){console.error("Failed to access camera in offscreen document:",e);let a=e.message;"NotAllowedError"===e.name||e.message.includes("Permission denied")||e.message.includes("Permission dismissed")?a="Camera permission was denied. Please allow camera access to use eye health monitoring features.":"NotFoundError"===e.name?a="No camera found. Please connect a camera to use this feature.":"NotReadableError"===e.name&&(a="Camera is already in use by another application."),o({success:!1,error:a})}})(),!0;if("STOP_CAMERA"===e.type)return(async()=>{try{await stopCVProcessing(),cameraStream&&(cameraStream.getTracks().forEach(e=>e.stop()),cameraStream=null,globalThis.eyeZenCameraStream=null,console.log("Camera stopped in offscreen document")),o({success:!0,message:"Camera stopped"})}catch(e){console.error("Failed to stop camera:",e),o({success:!1,error:e.message})}})(),!0;if("GET_CAMERA_STATE"===e.type){const e=null!==cameraStream&&cameraStream.getTracks().some(e=>"live"===e.readyState);return o({isActive:e}),!0}}),console.log("Offscreen document loaded for camera access and CV processing");
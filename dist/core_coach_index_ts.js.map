{"version":3,"file":"core_coach_index_ts.js","mappingssources":["webpack://eyezen-chrome-extension/./core/coach/index.ts"],"sourcesContent":["/**\n * AI Coach Module\n * Handles coaching script generation, break guidance, and motivational content\n */\nimport { BreakType } from '../../types/index';\nimport { ChromeAIService } from '../api/openai-service';\n/**\n * AI Coach Service\n * Generates personalized coaching content using Chrome's built-in AI\n */\nexport class AICoachService {\n    constructor() {\n        this.scriptCache = new Map();\n        // No API key needed for Chrome AI\n    }\n    /**\n     * Generate a coaching script based on user metrics and break type\n     */\n    async generateCoachingScript(breakType, userMetrics, settings) {\n        const cacheKey = this.generateCacheKey(breakType, userMetrics, settings);\n        // Check cache first\n        if (this.scriptCache.has(cacheKey)) {\n            const cached = this.scriptCache.get(cacheKey);\n            // Return cached if less than 1 hour old\n            if (Date.now() - cached.generated < 3600000) {\n                return cached;\n            }\n        }\n        try {\n            const prompt = this.buildPrompt(breakType, userMetrics, settings);\n            const response = await ChromeAIService.generateCoachingScript(this.getScriptType(breakType), {\n                fatigueLevel: this.getAverageFatigue(userMetrics),\n                breakCount: this.getDailyBreakCount(),\n                timeOfDay: this.getTimeOfDay(),\n                language: settings.language\n            });\n            const script = {\n                id: this.generateId(),\n                type: response.type,\n                content: response.content,\n                duration: response.duration,\n                language: response.language,\n                generated: response.generated\n            };\n            // Cache the script\n            this.scriptCache.set(cacheKey, script);\n            return script;\n        }\n        catch (error) {\n            console.error('Failed to generate coaching script:', error);\n            return this.getFallbackScript(breakType, settings.language);\n        }\n    }\n    /**\n     * Generate motivational content based on user progress\n     */\n    async generateMotivationalMessage(eyeHealthScore, streak, settings) {\n        try {\n            const fallbackText = this.getFallbackMotivation(eyeHealthScore, 'en');\n            const response = await ChromeAIService.translateText(fallbackText, settings.language);\n            return response;\n        }\n        catch (error) {\n            console.error('Failed to generate motivational message:', error);\n            return this.getFallbackMotivation(eyeHealthScore, settings.language);\n        }\n    }\n    /**\n     * Generate weekly summary insights\n     */\n    async generateWeeklySummary(weeklyData, settings) {\n        try {\n            const response = await ChromeAIService.generateWeeklySummary(weeklyData);\n            return response.improvements.join('\\n') + '\\n\\nRecommendations:\\n' + response.recommendations.join('\\n');\n        }\n        catch (error) {\n            console.error('Failed to generate weekly summary:', error);\n            return this.getFallbackSummary(weeklyData, settings.language);\n        }\n    }\n    getAverageFatigue(userMetrics) {\n        if (!userMetrics.length)\n            return 0;\n        // Calculate fatigue based on blink rate and fatigue index\n        const totalFatigue = userMetrics.reduce((sum, metric) => {\n            const blinkFatigue = metric.blinkRate < 15 ? 0.8 : 0.2; // Low blink rate indicates fatigue\n            const indexFatigue = metric.fatigueIndex / 100; // Convert to 0-1 scale\n            return sum + Math.max(blinkFatigue, indexFatigue);\n        }, 0);\n        return Math.min(totalFatigue / userMetrics.length, 1);\n    }\n    getDailyBreakCount() {\n        // Get break count from storage or default to 0\n        return parseInt(localStorage.getItem('dailyBreakCount') || '0');\n    }\n    getTimeOfDay() {\n        const hour = new Date().getHours();\n        if (hour < 12)\n            return 'morning';\n        if (hour < 17)\n            return 'afternoon';\n        return 'evening';\n    }\n    async callChromeAI(prompt, language) {\n        // This method is kept for compatibility but uses Chrome AI internally\n        try {\n            const response = await ChromeAIService.translateText(prompt, language);\n            return { content: response };\n        }\n        catch (error) {\n            throw new Error(`Chrome AI error: ${error}`);\n        }\n    }\n    buildPrompt(breakType, userMetrics, settings) {\n        const latestMetrics = userMetrics[userMetrics.length - 1];\n        const avgFatigue = userMetrics.slice(-5).reduce((sum, m) => sum + m.fatigueIndex, 0) / 5;\n        let prompt = `Generate a ${breakType} break coaching script for a user with:\n`;\n        prompt += `- Current fatigue level: ${Math.round(avgFatigue * 100)}%\n`;\n        prompt += `- Blink rate: ${latestMetrics?.blinkRate || 'unknown'} blinks/min\n`;\n        prompt += `- Posture: ${latestMetrics?.posture || 'unknown'}\n`;\n        prompt += `- Break duration: ${this.calculateDuration(breakType)} seconds\n\n`;\n        switch (breakType) {\n            case BreakType.MICRO:\n                prompt += 'Focus on quick eye exercises and blinking. Be concise and direct.';\n                break;\n            case BreakType.SHORT:\n                prompt += 'Include 20-20-20 rule guidance and simple stretches. Be encouraging.';\n                break;\n            case BreakType.LONG:\n                prompt += 'Provide comprehensive relaxation guidance including eye massage and posture correction.';\n                break;\n        }\n        return prompt;\n    }\n    buildMotivationalPrompt(eyeHealthScore, streak, settings) {\n        let prompt = `Generate a motivational message for a user with:\n`;\n        prompt += `- Eye health score: ${eyeHealthScore}/100\n`;\n        prompt += `- Current streak: ${streak} days\n`;\n        prompt += `- Daily break goal: ${settings.dailyBreakGoal}\n\n`;\n        if (eyeHealthScore >= 80) {\n            prompt += 'Celebrate their excellent progress and encourage consistency.';\n        }\n        else if (eyeHealthScore >= 60) {\n            prompt += 'Acknowledge improvement and provide gentle encouragement.';\n        }\n        else {\n            prompt += 'Provide supportive motivation and simple actionable tips.';\n        }\n        return prompt;\n    }\n    buildSummaryPrompt(weeklyData, settings) {\n        let prompt = `Generate a weekly eye health summary for:\n`;\n        prompt += `- Average eye health score: ${weeklyData.avgEyeHealthScore}/100\n`;\n        prompt += `- Total breaks taken: ${weeklyData.totalBreaks}\n`;\n        prompt += `- Screen time: ${Math.round(weeklyData.totalScreenTime / 60)} hours\n`;\n        prompt += `- Trend: ${weeklyData.eyeHealthTrend}\n\n`;\n        prompt += 'Provide insights, celebrate achievements, and suggest improvements for next week.';\n        return prompt;\n    }\n    getScriptType(breakType) {\n        switch (breakType) {\n            case BreakType.MICRO:\n                return 'instruction';\n            case BreakType.SHORT:\n                return 'motivation';\n            case BreakType.LONG:\n                return 'relaxation';\n            default:\n                return 'instruction';\n        }\n    }\n    calculateDuration(breakType) {\n        switch (breakType) {\n            case BreakType.MICRO:\n                return 20;\n            case BreakType.SHORT:\n                return 300; // 5 minutes\n            case BreakType.LONG:\n                return 900; // 15 minutes\n            default:\n                return 20;\n        }\n    }\n    generateCacheKey(breakType, userMetrics, settings) {\n        const latest = userMetrics[userMetrics.length - 1];\n        const fatigueLevel = Math.round((latest?.fatigueIndex || 0) * 10) / 10;\n        return `${breakType}-${fatigueLevel}-${settings.language}`;\n    }\n    generateId() {\n        return `script_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    getFallbackScript(breakType, language) {\n        const fallbacks = {\n            en: {\n                [BreakType.MICRO]: \"Take a moment to blink slowly 10 times. Look away from your screen and focus on something 20 feet away for 20 seconds.\",\n                [BreakType.SHORT]: \"It's time for a 5-minute break! Stand up, stretch your arms above your head, and do some gentle neck rolls. Remember the 20-20-20 rule: every 20 minutes, look at something 20 feet away for 20 seconds.\",\n                [BreakType.LONG]: \"Great job taking a longer break! Spend the next 15 minutes away from all screens. Try some gentle eye massage, drink water, and do some light stretching. Your eyes will thank you!\"\n            },\n            zh: {\n                [BreakType.MICRO]: \"花一点时间慢慢眨眼10次。将视线从屏幕上移开，专注于20英尺外的物体20秒钟。\",\n                [BreakType.SHORT]: \"是时候休息5分钟了！站起来，将手臂举过头顶，做一些轻柔的颈部转动。记住20-20-20法则：每20分钟，看20英尺外的物体20秒钟。\",\n                [BreakType.LONG]: \"很好，你选择了更长的休息时间！接下来15分钟远离所有屏幕。尝试一些轻柔的眼部按摩，喝水，做一些轻度拉伸。你的眼睛会感谢你的！\"\n            }\n        };\n        const scripts = fallbacks[language] || fallbacks.en;\n        return {\n            id: this.generateId(),\n            type: this.getScriptType(breakType),\n            content: scripts[breakType],\n            duration: this.calculateDuration(breakType),\n            language,\n            generated: Date.now()\n        };\n    }\n    getFallbackMotivation(eyeHealthScore, language) {\n        const motivations = {\n            en: {\n                high: \"Excellent work! Your eye health is in great shape. Keep up the fantastic habits!\",\n                medium: \"You're making good progress! A few more breaks each day will boost your eye health even more.\",\n                low: \"Every small step counts! Start with just one extra break today and build from there.\"\n            },\n            zh: {\n                high: \"做得很好！你的眼部健康状况很好。继续保持这些好习惯！\",\n                medium: \"你正在取得良好的进展！每天多休息几次会让你的眼部健康更上一层楼。\",\n                low: \"每一小步都很重要！从今天开始多休息一次，然后逐步改善。\"\n            }\n        };\n        const msgs = motivations[language] || motivations.en;\n        if (eyeHealthScore >= 80)\n            return msgs.high;\n        if (eyeHealthScore >= 60)\n            return msgs.medium;\n        return msgs.low;\n    }\n    getFallbackSummary(weeklyData, language) {\n        const summaries = {\n            en: `This week you took ${weeklyData.totalBreaks} breaks and maintained an average eye health score of ${weeklyData.avgEyeHealthScore}/100. Keep building on this progress!`,\n            zh: `本周你休息了${weeklyData.totalBreaks}次，平均眼部健康得分为${weeklyData.avgEyeHealthScore}/100。继续保持这个进步！`\n        };\n        return summaries[language] || summaries.en;\n    }\n}\n/**\n * Break Activity Generator\n * Provides structured break activities and guidance\n */\nexport class BreakActivityGenerator {\n    /**\n     * Generate activities for a break session\n     */\n    static generateActivities(breakType, language = 'en') {\n        switch (breakType) {\n            case BreakType.MICRO:\n                return this.getMicroBreakActivities(language);\n            case BreakType.SHORT:\n                return this.getShortBreakActivities(language);\n            case BreakType.LONG:\n                return this.getLongBreakActivities(language);\n            default:\n                return this.getMicroBreakActivities(language);\n        }\n    }\n    static getMicroBreakActivities(language) {\n        const activities = {\n            en: [\n                {\n                    type: 'exercise',\n                    name: 'Conscious Blinking',\n                    duration: 10,\n                    instructions: 'Blink slowly and deliberately 10 times'\n                },\n                {\n                    type: 'exercise',\n                    name: '20-20-20 Rule',\n                    duration: 20,\n                    instructions: 'Look at something 20 feet away for 20 seconds'\n                }\n            ],\n            zh: [\n                {\n                    type: 'exercise',\n                    name: '有意识眨眼',\n                    duration: 10,\n                    instructions: '缓慢而有意识地眨眼10次'\n                },\n                {\n                    type: 'exercise',\n                    name: '20-20-20法则',\n                    duration: 20,\n                    instructions: '看20英尺外的物体20秒钟'\n                }\n            ]\n        };\n        return activities[language] || activities.en;\n    }\n    static getShortBreakActivities(language) {\n        const activities = {\n            en: [\n                {\n                    type: 'exercise',\n                    name: 'Eye Circles',\n                    duration: 30,\n                    instructions: 'Slowly roll your eyes in circles, 5 times each direction'\n                },\n                {\n                    type: 'massage',\n                    name: 'Temple Massage',\n                    duration: 60,\n                    instructions: 'Gently massage your temples in circular motions'\n                },\n                {\n                    type: 'exercise',\n                    name: 'Neck Stretch',\n                    duration: 45,\n                    instructions: 'Gently stretch your neck side to side and up and down'\n                },\n                {\n                    type: 'hydration',\n                    name: 'Hydration Break',\n                    duration: 30,\n                    instructions: 'Drink a glass of water to stay hydrated'\n                }\n            ],\n            zh: [\n                {\n                    type: 'exercise',\n                    name: '眼球转动',\n                    duration: 30,\n                    instructions: '缓慢转动眼球，每个方向5次'\n                },\n                {\n                    type: 'massage',\n                    name: '太阳穴按摩',\n                    duration: 60,\n                    instructions: '轻柔地以圆周运动按摩太阳穴'\n                },\n                {\n                    type: 'exercise',\n                    name: '颈部拉伸',\n                    duration: 45,\n                    instructions: '轻柔地左右、上下拉伸颈部'\n                },\n                {\n                    type: 'hydration',\n                    name: '补水休息',\n                    duration: 30,\n                    instructions: '喝一杯水保持水分'\n                }\n            ]\n        };\n        return activities[language] || activities.en;\n    }\n    static getLongBreakActivities(language) {\n        const activities = {\n            en: [\n                {\n                    type: 'massage',\n                    name: 'TCM Eye Massage',\n                    duration: 180,\n                    instructions: 'Follow the guided TCM massage points: Zan Zhu, Si Bai, Jing Ming'\n                },\n                {\n                    type: 'exercise',\n                    name: 'Full Body Stretch',\n                    duration: 120,\n                    instructions: 'Stand up and do a full body stretch routine'\n                },\n                {\n                    type: 'exercise',\n                    name: 'Deep Breathing',\n                    duration: 90,\n                    instructions: 'Practice deep breathing exercises to relax'\n                },\n                {\n                    type: 'hydration',\n                    name: 'Mindful Hydration',\n                    duration: 60,\n                    instructions: 'Drink water mindfully and take a moment to rest'\n                },\n                {\n                    type: 'exercise',\n                    name: 'Eye Palming',\n                    duration: 120,\n                    instructions: 'Cover your eyes with palms and relax in darkness'\n                }\n            ],\n            zh: [\n                {\n                    type: 'massage',\n                    name: '中医眼部按摩',\n                    duration: 180,\n                    instructions: '按照指导进行中医按摩穴位：攒竹、四白、睛明'\n                },\n                {\n                    type: 'exercise',\n                    name: '全身拉伸',\n                    duration: 120,\n                    instructions: '站起来做全身拉伸运动'\n                },\n                {\n                    type: 'exercise',\n                    name: '深呼吸',\n                    duration: 90,\n                    instructions: '练习深呼吸放松身心'\n                },\n                {\n                    type: 'hydration',\n                    name: '正念补水',\n                    duration: 60,\n                    instructions: '专心喝水，花一点时间休息'\n                },\n                {\n                    type: 'exercise',\n                    name: '眼部掌敷',\n                    duration: 120,\n                    instructions: '用手掌覆盖眼部，在黑暗中放松'\n                }\n            ]\n        };\n        return activities[language] || activities.en;\n    }\n}\n/**\n * Text-to-Speech Service\n * Handles audio coaching using Web Speech API\n */\nexport class TextToSpeechService {\n    constructor() {\n        this.currentUtterance = null;\n        this.synthesis = window.speechSynthesis;\n    }\n    /**\n     * Speak coaching script content\n     */\n    speak(text, language = 'en-US', rate = 1.0) {\n        return new Promise((resolve, reject) => {\n            if (!this.synthesis) {\n                reject(new Error('Speech synthesis not supported'));\n                return;\n            }\n            // Stop any current speech\n            this.stop();\n            const utterance = new SpeechSynthesisUtterance(text);\n            utterance.lang = language;\n            utterance.rate = rate;\n            utterance.pitch = 1.0;\n            utterance.volume = 1.0;\n            utterance.onend = () => {\n                this.currentUtterance = null;\n                resolve();\n            };\n            utterance.onerror = (event) => {\n                this.currentUtterance = null;\n                reject(new Error(`Speech synthesis error: ${event.error}`));\n            };\n            this.currentUtterance = utterance;\n            this.synthesis.speak(utterance);\n        });\n    }\n    /**\n     * Stop current speech\n     */\n    stop() {\n        if (this.synthesis && this.synthesis.speaking) {\n            this.synthesis.cancel();\n        }\n        this.currentUtterance = null;\n    }\n    /**\n     * Pause current speech\n     */\n    pause() {\n        if (this.synthesis && this.synthesis.speaking) {\n            this.synthesis.pause();\n        }\n    }\n    /**\n     * Resume paused speech\n     */\n    resume() {\n        if (this.synthesis && this.synthesis.paused) {\n            this.synthesis.resume();\n        }\n    }\n    /**\n     * Check if currently speaking\n     */\n    isSpeaking() {\n        return this.synthesis ? this.synthesis.speaking : false;\n    }\n    /**\n     * Get available voices\n     */\n    getVoices() {\n        return this.synthesis ? this.synthesis.getVoices() : [];\n    }\n}\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"core_api_openai-service_ts.js","mappingssources":["webpack://eyezen-chrome-extension/./core/api/openai-service.ts"],"sourcesContent":["/**\n * Chrome AI Service\n * Handles AI-powered features using Chrome's built-in Gemini Nano model\n * Replaces OpenAI API with Chrome's Prompt API for coaching scripts, weekly summaries, and translations\n */\nexport class ChromeAIService {\n    /**\n     * Initialize the Chrome AI service\n     */\n    static async initialize() {\n        try {\n            if (!window.ai?.languageModel) {\n                console.warn('Chrome AI not available. AI features will use mock data.');\n                return;\n            }\n            const capabilities = await window.ai.languageModel.capabilities();\n            if (capabilities.available === 'no') {\n                console.warn('Chrome AI model not available. AI features will use mock data.');\n                return;\n            }\n            if (capabilities.available === 'after-download') {\n                console.log('Chrome AI model downloading...');\n            }\n            // Create a session for general use\n            this.session = await window.ai.languageModel.create({\n                temperature: this.DEFAULT_TEMPERATURE,\n                topK: this.DEFAULT_TOP_K,\n                monitor: (m) => {\n                    m.addEventListener('downloadprogress', (e) => {\n                        console.log(`Chrome AI model download progress: ${Math.round(e.loaded * 100)}%`);\n                    });\n                }\n            });\n            this.isInitialized = true;\n            console.log('Chrome AI service initialized successfully');\n        }\n        catch (error) {\n            console.error('Failed to initialize Chrome AI service:', error);\n        }\n    }\n    /**\n     * Generate a personalized coaching script\n     */\n    static async generateCoachingScript(type, userContext) {\n        try {\n            if (!this.isInitialized || !this.session) {\n                return this.getMockCoachingScript(type, userContext.language);\n            }\n            const prompt = this.buildCoachingPrompt(type, userContext);\n            const systemPrompt = 'You are an expert eye health coach specializing in Traditional Chinese Medicine and modern ergonomics. Generate helpful, encouraging, and practical coaching scripts.';\n            const response = await this.session.prompt([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: prompt }\n            ]);\n            const content = response?.trim() || this.getMockCoachingScript(type, userContext.language).content;\n            return {\n                id: Date.now().toString(),\n                type,\n                content: content.substring(0, 300), // Limit content length\n                duration: this.estimateDuration(content),\n                language: userContext.language,\n                generated: Date.now()\n            };\n        }\n        catch (error) {\n            console.error('Failed to generate coaching script:', error);\n            return this.getMockCoachingScript(type, userContext.language);\n        }\n    }\n    /**\n     * Generate weekly summary with insights and recommendations\n     */\n    static async generateWeeklySummary(userData) {\n        try {\n            if (!this.isInitialized || !this.session) {\n                return this.getMockWeeklySummary(userData);\n            }\n            const weekStart = Date.now() - 7 * 24 * 60 * 60 * 1000;\n            const weekEnd = Date.now();\n            // Filter data for the past week\n            const weeklyMetrics = userData.metrics.filter(m => m.timestamp >= weekStart);\n            const weeklyBreaks = userData.breaks.filter(b => b.startTime >= weekStart);\n            const prompt = this.buildWeeklySummaryPrompt({\n                metrics: weeklyMetrics,\n                breaks: weeklyBreaks,\n                settings: userData.settings,\n                currentScore: userData.score\n            });\n            const systemPrompt = 'You are an eye health analyst. Analyze weekly data and provide actionable insights, improvements, and recommendations in a supportive tone.';\n            const response = await this.session.prompt([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: prompt }\n            ]);\n            const analysis = response || '';\n            const parsedAnalysis = this.parseWeeklySummary(analysis);\n            return {\n                weekStart,\n                weekEnd,\n                totalBreaks: weeklyBreaks.filter(b => b.completed).length,\n                averageEyeScore: userData.score.weekly,\n                fatigueEvents: weeklyMetrics.filter(m => m.fatigueIndex > userData.settings.fatigueThreshold).length,\n                improvements: parsedAnalysis.improvements,\n                recommendations: parsedAnalysis.recommendations,\n                generated: Date.now()\n            };\n        }\n        catch (error) {\n            console.error('Failed to generate weekly summary:', error);\n            return this.getMockWeeklySummary(userData);\n        }\n    }\n    /**\n     * Translate text to specified language\n     */\n    static async translateText(text, targetLanguage) {\n        try {\n            if (!this.isInitialized || !this.session) {\n                return `[${targetLanguage.toUpperCase()}] ${text}`; // Mock translation\n            }\n            const prompt = `Translate the following text to ${targetLanguage}. Maintain the tone and context, especially for health and wellness content: \"${text}\"`;\n            const systemPrompt = 'You are a professional translator. Provide accurate translations while maintaining the original meaning and tone.';\n            const response = await this.session.prompt([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: prompt }\n            ]);\n            return response?.trim() || text;\n        }\n        catch (error) {\n            console.error('Failed to translate text:', error);\n            return text;\n        }\n    }\n    /**\n     * Rewrite text for better clarity or tone\n     */\n    static async rewriteText(text, style) {\n        try {\n            if (!this.isInitialized || !this.session) {\n                return `[${style.toUpperCase()}] ${text}`; // Mock rewrite\n            }\n            const stylePrompts = {\n                formal: 'Rewrite this text in a formal, professional tone',\n                casual: 'Rewrite this text in a casual, friendly tone',\n                encouraging: 'Rewrite this text to be more encouraging and motivational',\n                concise: 'Rewrite this text to be more concise while keeping the key message'\n            };\n            const prompt = `${stylePrompts[style]}. Maintain the original meaning and context: \"${text}\"`;\n            const systemPrompt = 'You are a skilled writer. Rewrite text according to the specified style while preserving the original meaning.';\n            const response = await this.session.prompt([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: prompt }\n            ]);\n            return response?.trim() || text;\n        }\n        catch (error) {\n            console.error('Failed to rewrite text:', error);\n            return text;\n        }\n    }\n    /**\n     * Destroy the current session and cleanup\n     */\n    static destroy() {\n        if (this.session) {\n            try {\n                this.session.destroy();\n            }\n            catch (error) {\n                console.error('Error destroying Chrome AI session:', error);\n            }\n            this.session = null;\n            this.isInitialized = false;\n        }\n    }\n    /**\n     * Build coaching prompt based on context\n     */\n    static buildCoachingPrompt(type, context) {\n        const baseContext = `Current fatigue level: ${context.fatigueLevel}%, breaks taken today: ${context.breakCount}, time: ${context.timeOfDay}`;\n        switch (type) {\n            case 'motivation':\n                return `Generate a motivational message for someone taking an eye break. ${baseContext}. Keep it under 50 words, encouraging, and focused on eye health benefits.`;\n            case 'instruction':\n                return `Generate clear instructions for eye exercises during a break. ${baseContext}. Include specific techniques like the 20-20-20 rule or TCM massage points. Keep it under 60 words.`;\n            case 'relaxation':\n                return `Generate a calming, mindful message for relaxation during an eye break. ${baseContext}. Focus on breathing, mindfulness, and letting go of screen tension. Keep it under 50 words.`;\n            default:\n                return `Generate a helpful eye health message. ${baseContext}.`;\n        }\n    }\n    /**\n     * Build weekly summary prompt\n     */\n    static buildWeeklySummaryPrompt(data) {\n        return `Analyze this week's eye health data and provide insights:\n\nMetrics: ${data.metrics.length} readings, average fatigue: ${data.metrics.reduce((sum, m) => sum + m.fatigueIndex, 0) / data.metrics.length || 0}%\nBreaks: ${data.breaks.length} total, ${data.breaks.filter((b) => b.completed).length} completed\nCurrent eye score: ${data.currentScore.current}\nSettings: ${data.settings.reminderInterval}min intervals, ${data.settings.dailyBreakGoal} daily goal\n\nProvide:\n1. 2-3 key improvements this week\n2. 2-3 actionable recommendations\n\nFormat as JSON: {\"improvements\": [\"...\"], \"recommendations\": [\"...\"]}`;\n    }\n    /**\n     * Parse weekly summary response\n     */\n    static parseWeeklySummary(analysis) {\n        try {\n            const parsed = JSON.parse(analysis);\n            return {\n                improvements: parsed.improvements || [],\n                recommendations: parsed.recommendations || []\n            };\n        }\n        catch {\n            // Fallback parsing\n            const improvements = analysis.match(/improvements?[:\\s]*([^\\n]*)/gi)?.[0]?.split(',') || [];\n            const recommendations = analysis.match(/recommendations?[:\\s]*([^\\n]*)/gi)?.[0]?.split(',') || [];\n            return {\n                improvements: improvements.slice(0, 3),\n                recommendations: recommendations.slice(0, 3)\n            };\n        }\n    }\n    /**\n     * Estimate reading duration in seconds\n     */\n    static estimateDuration(text) {\n        const wordsPerMinute = 200;\n        const words = text.split(' ').length;\n        return Math.max(Math.ceil((words / wordsPerMinute) * 60), 10);\n    }\n    /**\n     * Get mock coaching script for fallback\n     */\n    static getMockCoachingScript(type, language) {\n        const scripts = {\n            motivation: {\n                en: \"Great job taking this break! Your eyes will thank you for this moment of rest. Every break brings you closer to better eye health.\",\n                zh: \"很好，你正在休息！你的眼睛会感谢你给它们这个休息的时刻。每次休息都让你更接近更好的眼部健康。\",\n                es: \"¡Excelente trabajo tomando este descanso! Tus ojos te agradecerán este momento de descanso. Cada pausa te acerca a una mejor salud ocular.\"\n            },\n            instruction: {\n                en: \"Look at something 20 feet away for 20 seconds. Blink slowly and deliberately. Gently massage the temples in circular motions.\",\n                zh: \"看向20英尺外的物体20秒钟。缓慢而有意识地眨眼。轻柔地以圆周运动按摩太阳穴。\",\n                es: \"Mira algo a 20 pies de distancia durante 20 segundos. Parpadea lenta y deliberadamente. Masajea suavemente las sienes con movimientos circulares.\"\n            },\n            relaxation: {\n                en: \"Take a deep breath and let your shoulders drop. Feel the tension leaving your eye muscles. You are giving yourself the gift of rest.\",\n                zh: \"深呼吸，让肩膀放松下来。感受眼部肌肉的紧张感消失。你正在给自己休息的礼物。\",\n                es: \"Respira profundamente y deja caer los hombros. Siente cómo la tensión abandona los músculos de tus ojos. Te estás dando el regalo del descanso.\"\n            }\n        };\n        const content = scripts[type][language] || scripts[type].en;\n        return {\n            id: Date.now().toString(),\n            type,\n            content,\n            duration: this.estimateDuration(content),\n            language,\n            generated: Date.now()\n        };\n    }\n    /**\n     * Get mock weekly summary for fallback\n     */\n    static getMockWeeklySummary(userData) {\n        return {\n            weekStart: Date.now() - 7 * 24 * 60 * 60 * 1000,\n            weekEnd: Date.now(),\n            totalBreaks: userData.breaks.filter(b => b.completed).length,\n            averageEyeScore: userData.score.weekly,\n            fatigueEvents: userData.metrics.filter(m => m.fatigueIndex > userData.settings.fatigueThreshold).length,\n            improvements: [\n                'Maintained consistent break schedule',\n                'Reduced peak fatigue incidents',\n                'Improved overall eye score trend'\n            ],\n            recommendations: [\n                'Continue with regular 20-20-20 breaks',\n                'Consider adjusting screen brightness in the evening',\n                'Try the TCM massage techniques during longer breaks'\n            ],\n            generated: Date.now()\n        };\n    }\n}\nChromeAIService.session = null;\nChromeAIService.isInitialized = false;\nChromeAIService.DEFAULT_TEMPERATURE = 0.7;\nChromeAIService.DEFAULT_TOP_K = 3;\n// Initialize the service\nChromeAIService.initialize();\n// Export as OpenAIService for backward compatibility\nexport const OpenAIService = ChromeAIService;\nexport default ChromeAIService;\n"],"names":[],"sourceRoot":""}
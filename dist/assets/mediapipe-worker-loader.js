let faceLandmarker=null,isInitialized=!1,initializationPromise=null,mediaPipeModuleCache=null;async function initializeMediaPipe(){return initializationPromise||(initializationPromise=(async()=>{try{console.log("üöÄ Initializing MediaPipe with lazy loading..."),mediaPipeModuleCache||(console.log("üì¶ Lazy loading MediaPipe modules..."),mediaPipeModuleCache=await loadMediaPipeModules());const{FilesetResolver:e,FaceLandmarker:i}=mediaPipeModuleCache;if(console.log("üîç MediaPipe classes loaded:",{FilesetResolver:!!e,FaceLandmarker:!!i}),!e||!i)throw new Error("MediaPipe classes not available.");const a=await e.forVisionTasks("./assets/wasm");faceLandmarker=await i.createFromOptions(a,{baseOptions:{modelAssetPath:"./assets/wasm/face_landmarker.task",delegate:"CPU"},outputFaceBlendshapes:!1,runningMode:"VIDEO",numFaces:1,minFaceDetectionConfidence:.5,minFacePresenceConfidence:.5,minTrackingConfidence:.5}),isInitialized=!0,console.log("‚úÖ MediaPipe initialized successfully with optimizations")}catch(e){throw console.error("‚ùå Failed to initialize MediaPipe:",e),initializationPromise=null,e}})(),initializationPromise)}async function loadMediaPipeModules(){try{let e,i;if("undefined"!=typeof importScripts){console.log("üì¶ Loading vision bundle from local assets...");const a=await import("./vision_bundle.js");console.log("üì¶ Vision bundle loaded:",Object.keys(a)),e=a.FilesetResolver,i=a.FaceLandmarker}else{console.log("üì¶ Loading from @mediapipe/tasks-vision package...");const a=await import("@mediapipe/tasks-vision");e=a.FilesetResolver,i=a.FaceLandmarker}return{FilesetResolver:e,FaceLandmarker:i}}catch(e){throw console.error("‚ùå Failed to load MediaPipe modules:",e),e}}function detectForVideo(e,i){if(!isInitialized||!faceLandmarker)return console.log("‚ö†Ô∏è MediaPipe not initialized yet"),{faceLandmarks:[]};try{const a=(new Date).toISOString();console.log(`üîç [${a}] Processing frame for face detection:`,{imageWidth:e.width,imageHeight:e.height,timestamp:i});const o=faceLandmarker.detectForVideo(e,i);return o.faceLandmarks&&o.faceLandmarks.length>0?console.log("üë§ Face detected! Received eye metrics:",{facesDetected:o.faceLandmarks.length,landmarksCount:o.faceLandmarks[0].length}):console.log(`‚ùå [${a}] No face detected in frame`),o}catch(e){return console.error("Face detection error:",e),{faceLandmarks:[]}}}const MediaPipeWorkerLoader={async loadVisionTasks(){try{return console.log("üöÄ Loading real MediaPipe Vision Tasks..."),await initializeMediaPipe(),console.log("‚úÖ MediaPipe Vision Tasks loaded successfully"),{initializeMediaPipe,detectForVideo}}catch(e){throw console.error("‚ùå Failed to load MediaPipe Vision Tasks:",e),e}}};"undefined"!=typeof module&&module.exports?module.exports=MediaPipeWorkerLoader:(globalThis.MediaPipeWorkerLoader=MediaPipeWorkerLoader,globalThis.detectForVideo=detectForVideo,globalThis.initializeMediaPipe=initializeMediaPipe);
{"version":3,"file":"popup.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjgpjXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxCA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AEjDA;AACA;AACA;AACA;AACA","sources":["webpack://eyezen-chrome-extension/./core/api/openai-service.ts","webpack://eyezen-chrome-extension/./core/coach/index.ts","webpack://eyezen-chrome-extension/./core/metrics/index.ts","webpack://eyezen-chrome-extension/./ui/components/CameraPermissionPopup.tsx","webpack://eyezen-chrome-extension/./ui/components/LoginModal.tsx","webpack://eyezen-chrome-extension/./ui/components/Popup.tsx","webpack://eyezen-chrome-extension/./ui/popup.tsx","webpack://eyezen-chrome-extension/./ui/styles/popup.css","webpack://eyezen-chrome-extension/webpack/bootstrap","webpack://eyezen-chrome-extension/webpack/runtime/chunk loaded","webpack://eyezen-chrome-extension/webpack/runtime/compat get default export","webpack://eyezen-chrome-extension/webpack/runtime/define property getters","webpack://eyezen-chrome-extension/webpack/runtime/hasOwnProperty shorthand","webpack://eyezen-chrome-extension/webpack/runtime/make namespace object","webpack://eyezen-chrome-extension/webpack/runtime/node module decorator","webpack://eyezen-chrome-extension/webpack/runtime/jsonp chunk loading","webpack://eyezen-chrome-extension/webpack/before-startup","webpack://eyezen-chrome-extension/webpack/startup","webpack://eyezen-chrome-extension/webpack/after-startup"],"sourcesContent":["/**\n * Chrome AI Service\n * Handles AI-powered features using Chrome's built-in Gemini Nano model\n * Replaces OpenAI API with Chrome's Prompt API for coaching scripts, weekly summaries, and translations\n */\nexport class ChromeAIService {\n    /**\n     * Initialize the Chrome AI service\n     */\n    static async initialize() {\n        try {\n            if (!window.ai?.languageModel) {\n                console.warn('Chrome AI not available. AI features will use mock data.');\n                return;\n            }\n            const capabilities = await window.ai.languageModel.capabilities();\n            if (capabilities.available === 'no') {\n                console.warn('Chrome AI model not available. AI features will use mock data.');\n                return;\n            }\n            if (capabilities.available === 'after-download') {\n                console.log('Chrome AI model downloading...');\n            }\n            // Create a session for general use\n            this.session = await window.ai.languageModel.create({\n                temperature: this.DEFAULT_TEMPERATURE,\n                topK: this.DEFAULT_TOP_K,\n                monitor: (m) => {\n                    m.addEventListener('downloadprogress', (e) => {\n                        console.log(`Chrome AI model download progress: ${Math.round(e.loaded * 100)}%`);\n                    });\n                }\n            });\n            this.isInitialized = true;\n            console.log('Chrome AI service initialized successfully');\n        }\n        catch (error) {\n            console.error('Failed to initialize Chrome AI service:', error);\n        }\n    }\n    /**\n     * Generate a personalized coaching script\n     */\n    static async generateCoachingScript(type, userContext) {\n        try {\n            if (!this.isInitialized || !this.session) {\n                return this.getMockCoachingScript(type, userContext.language);\n            }\n            const prompt = this.buildCoachingPrompt(type, userContext);\n            const systemPrompt = 'You are an expert eye health coach specializing in Traditional Chinese Medicine and modern ergonomics. Generate helpful, encouraging, and practical coaching scripts.';\n            const response = await this.session.prompt([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: prompt }\n            ]);\n            const content = response?.trim() || this.getMockCoachingScript(type, userContext.language).content;\n            return {\n                id: Date.now().toString(),\n                type,\n                content: content.substring(0, 300), // Limit content length\n                duration: this.estimateDuration(content),\n                language: userContext.language,\n                generated: Date.now()\n            };\n        }\n        catch (error) {\n            console.error('Failed to generate coaching script:', error);\n            return this.getMockCoachingScript(type, userContext.language);\n        }\n    }\n    /**\n     * Generate weekly summary with insights and recommendations\n     */\n    static async generateWeeklySummary(userData) {\n        try {\n            if (!this.isInitialized || !this.session) {\n                return this.getMockWeeklySummary(userData);\n            }\n            const weekStart = Date.now() - 7 * 24 * 60 * 60 * 1000;\n            const weekEnd = Date.now();\n            // Filter data for the past week\n            const weeklyMetrics = userData.metrics.filter(m => m.timestamp >= weekStart);\n            const weeklyBreaks = userData.breaks.filter(b => b.startTime >= weekStart);\n            const prompt = this.buildWeeklySummaryPrompt({\n                metrics: weeklyMetrics,\n                breaks: weeklyBreaks,\n                settings: userData.settings,\n                currentScore: userData.score\n            });\n            const systemPrompt = 'You are an eye health analyst. Analyze weekly data and provide actionable insights, improvements, and recommendations in a supportive tone.';\n            const response = await this.session.prompt([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: prompt }\n            ]);\n            const analysis = response || '';\n            const parsedAnalysis = this.parseWeeklySummary(analysis);\n            return {\n                weekStart,\n                weekEnd,\n                totalBreaks: weeklyBreaks.filter(b => b.completed).length,\n                averageEyeScore: userData.score.weekly,\n                fatigueEvents: weeklyMetrics.filter(m => m.fatigueIndex > userData.settings.fatigueThreshold).length,\n                improvements: parsedAnalysis.improvements,\n                recommendations: parsedAnalysis.recommendations,\n                generated: Date.now()\n            };\n        }\n        catch (error) {\n            console.error('Failed to generate weekly summary:', error);\n            return this.getMockWeeklySummary(userData);\n        }\n    }\n    /**\n     * Translate text to specified language\n     */\n    static async translateText(text, targetLanguage) {\n        try {\n            if (!this.isInitialized || !this.session) {\n                return `[${targetLanguage.toUpperCase()}] ${text}`; // Mock translation\n            }\n            const prompt = `Translate the following text to ${targetLanguage}. Maintain the tone and context, especially for health and wellness content: \"${text}\"`;\n            const systemPrompt = 'You are a professional translator. Provide accurate translations while maintaining the original meaning and tone.';\n            const response = await this.session.prompt([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: prompt }\n            ]);\n            return response?.trim() || text;\n        }\n        catch (error) {\n            console.error('Failed to translate text:', error);\n            return text;\n        }\n    }\n    /**\n     * Rewrite text for better clarity or tone\n     */\n    static async rewriteText(text, style) {\n        try {\n            if (!this.isInitialized || !this.session) {\n                return `[${style.toUpperCase()}] ${text}`; // Mock rewrite\n            }\n            const stylePrompts = {\n                formal: 'Rewrite this text in a formal, professional tone',\n                casual: 'Rewrite this text in a casual, friendly tone',\n                encouraging: 'Rewrite this text to be more encouraging and motivational',\n                concise: 'Rewrite this text to be more concise while keeping the key message'\n            };\n            const prompt = `${stylePrompts[style]}. Maintain the original meaning and context: \"${text}\"`;\n            const systemPrompt = 'You are a skilled writer. Rewrite text according to the specified style while preserving the original meaning.';\n            const response = await this.session.prompt([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: prompt }\n            ]);\n            return response?.trim() || text;\n        }\n        catch (error) {\n            console.error('Failed to rewrite text:', error);\n            return text;\n        }\n    }\n    /**\n     * Destroy the current session and cleanup\n     */\n    static destroy() {\n        if (this.session) {\n            try {\n                this.session.destroy();\n            }\n            catch (error) {\n                console.error('Error destroying Chrome AI session:', error);\n            }\n            this.session = null;\n            this.isInitialized = false;\n        }\n    }\n    /**\n     * Build coaching prompt based on context\n     */\n    static buildCoachingPrompt(type, context) {\n        const baseContext = `Current fatigue level: ${context.fatigueLevel}%, breaks taken today: ${context.breakCount}, time: ${context.timeOfDay}`;\n        switch (type) {\n            case 'motivation':\n                return `Generate a motivational message for someone taking an eye break. ${baseContext}. Keep it under 50 words, encouraging, and focused on eye health benefits.`;\n            case 'instruction':\n                return `Generate clear instructions for eye exercises during a break. ${baseContext}. Include specific techniques like the 20-20-20 rule or TCM massage points. Keep it under 60 words.`;\n            case 'relaxation':\n                return `Generate a calming, mindful message for relaxation during an eye break. ${baseContext}. Focus on breathing, mindfulness, and letting go of screen tension. Keep it under 50 words.`;\n            default:\n                return `Generate a helpful eye health message. ${baseContext}.`;\n        }\n    }\n    /**\n     * Build weekly summary prompt\n     */\n    static buildWeeklySummaryPrompt(data) {\n        return `Analyze this week's eye health data and provide insights:\n\nMetrics: ${data.metrics.length} readings, average fatigue: ${data.metrics.reduce((sum, m) => sum + m.fatigueIndex, 0) / data.metrics.length || 0}%\nBreaks: ${data.breaks.length} total, ${data.breaks.filter((b) => b.completed).length} completed\nCurrent eye score: ${data.currentScore.current}\nSettings: ${data.settings.reminderInterval}min intervals, ${data.settings.dailyBreakGoal} daily goal\n\nProvide:\n1. 2-3 key improvements this week\n2. 2-3 actionable recommendations\n\nFormat as JSON: {\"improvements\": [\"...\"], \"recommendations\": [\"...\"]}`;\n    }\n    /**\n     * Parse weekly summary response\n     */\n    static parseWeeklySummary(analysis) {\n        try {\n            const parsed = JSON.parse(analysis);\n            return {\n                improvements: parsed.improvements || [],\n                recommendations: parsed.recommendations || []\n            };\n        }\n        catch {\n            // Fallback parsing\n            const improvements = analysis.match(/improvements?[:\\s]*([^\\n]*)/gi)?.[0]?.split(',') || [];\n            const recommendations = analysis.match(/recommendations?[:\\s]*([^\\n]*)/gi)?.[0]?.split(',') || [];\n            return {\n                improvements: improvements.slice(0, 3),\n                recommendations: recommendations.slice(0, 3)\n            };\n        }\n    }\n    /**\n     * Estimate reading duration in seconds\n     */\n    static estimateDuration(text) {\n        const wordsPerMinute = 200;\n        const words = text.split(' ').length;\n        return Math.max(Math.ceil((words / wordsPerMinute) * 60), 10);\n    }\n    /**\n     * Get mock coaching script for fallback\n     */\n    static getMockCoachingScript(type, language) {\n        const scripts = {\n            motivation: {\n                en: \"Great job taking this break! Your eyes will thank you for this moment of rest. Every break brings you closer to better eye health.\",\n                zh: \"很好，你正在休息！你的眼睛会感谢你给它们这个休息的时刻。每次休息都让你更接近更好的眼部健康。\",\n                es: \"¡Excelente trabajo tomando este descanso! Tus ojos te agradecerán este momento de descanso. Cada pausa te acerca a una mejor salud ocular.\"\n            },\n            instruction: {\n                en: \"Look at something 20 feet away for 20 seconds. Blink slowly and deliberately. Gently massage the temples in circular motions.\",\n                zh: \"看向20英尺外的物体20秒钟。缓慢而有意识地眨眼。轻柔地以圆周运动按摩太阳穴。\",\n                es: \"Mira algo a 20 pies de distancia durante 20 segundos. Parpadea lenta y deliberadamente. Masajea suavemente las sienes con movimientos circulares.\"\n            },\n            relaxation: {\n                en: \"Take a deep breath and let your shoulders drop. Feel the tension leaving your eye muscles. You are giving yourself the gift of rest.\",\n                zh: \"深呼吸，让肩膀放松下来。感受眼部肌肉的紧张感消失。你正在给自己休息的礼物。\",\n                es: \"Respira profundamente y deja caer los hombros. Siente cómo la tensión abandona los músculos de tus ojos. Te estás dando el regalo del descanso.\"\n            }\n        };\n        const content = scripts[type][language] || scripts[type].en;\n        return {\n            id: Date.now().toString(),\n            type,\n            content,\n            duration: this.estimateDuration(content),\n            language,\n            generated: Date.now()\n        };\n    }\n    /**\n     * Get mock weekly summary for fallback\n     */\n    static getMockWeeklySummary(userData) {\n        return {\n            weekStart: Date.now() - 7 * 24 * 60 * 60 * 1000,\n            weekEnd: Date.now(),\n            totalBreaks: userData.breaks.filter(b => b.completed).length,\n            averageEyeScore: userData.score.weekly,\n            fatigueEvents: userData.metrics.filter(m => m.fatigueIndex > userData.settings.fatigueThreshold).length,\n            improvements: [\n                'Maintained consistent break schedule',\n                'Reduced peak fatigue incidents',\n                'Improved overall eye score trend'\n            ],\n            recommendations: [\n                'Continue with regular 20-20-20 breaks',\n                'Consider adjusting screen brightness in the evening',\n                'Try the TCM massage techniques during longer breaks'\n            ],\n            generated: Date.now()\n        };\n    }\n}\nChromeAIService.session = null;\nChromeAIService.isInitialized = false;\nChromeAIService.DEFAULT_TEMPERATURE = 0.7;\nChromeAIService.DEFAULT_TOP_K = 3;\n// Initialize the service\nChromeAIService.initialize();\n// Export as OpenAIService for backward compatibility\nexport const OpenAIService = ChromeAIService;\nexport default ChromeAIService;\n","/**\n * AI Coach Module\n * Handles coaching script generation, break guidance, and motivational content\n */\nimport { BreakType } from '../../types/index';\nimport { ChromeAIService } from '../api/openai-service';\n/**\n * AI Coach Service\n * Generates personalized coaching content using Chrome's built-in AI\n */\nexport class AICoachService {\n    constructor() {\n        this.scriptCache = new Map();\n        // No API key needed for Chrome AI\n    }\n    /**\n     * Generate a coaching script based on user metrics and break type\n     */\n    async generateCoachingScript(breakType, userMetrics, settings) {\n        const cacheKey = this.generateCacheKey(breakType, userMetrics, settings);\n        // Check cache first\n        if (this.scriptCache.has(cacheKey)) {\n            const cached = this.scriptCache.get(cacheKey);\n            // Return cached if less than 1 hour old\n            if (Date.now() - cached.generated < 3600000) {\n                return cached;\n            }\n        }\n        try {\n            const prompt = this.buildPrompt(breakType, userMetrics, settings);\n            const response = await ChromeAIService.generateCoachingScript(this.getScriptType(breakType), {\n                fatigueLevel: this.getAverageFatigue(userMetrics),\n                breakCount: this.getDailyBreakCount(),\n                timeOfDay: this.getTimeOfDay(),\n                language: settings.language\n            });\n            const script = {\n                id: this.generateId(),\n                type: response.type,\n                content: response.content,\n                duration: response.duration,\n                language: response.language,\n                generated: response.generated\n            };\n            // Cache the script\n            this.scriptCache.set(cacheKey, script);\n            return script;\n        }\n        catch (error) {\n            console.error('Failed to generate coaching script:', error);\n            return this.getFallbackScript(breakType, settings.language);\n        }\n    }\n    /**\n     * Generate motivational content based on user progress\n     */\n    async generateMotivationalMessage(eyeHealthScore, streak, settings) {\n        try {\n            const fallbackText = this.getFallbackMotivation(eyeHealthScore, 'en');\n            const response = await ChromeAIService.translateText(fallbackText, settings.language);\n            return response;\n        }\n        catch (error) {\n            console.error('Failed to generate motivational message:', error);\n            return this.getFallbackMotivation(eyeHealthScore, settings.language);\n        }\n    }\n    /**\n     * Generate weekly summary insights\n     */\n    async generateWeeklySummary(weeklyData, settings) {\n        try {\n            const response = await ChromeAIService.generateWeeklySummary(weeklyData);\n            return response.improvements.join('\\n') + '\\n\\nRecommendations:\\n' + response.recommendations.join('\\n');\n        }\n        catch (error) {\n            console.error('Failed to generate weekly summary:', error);\n            return this.getFallbackSummary(weeklyData, settings.language);\n        }\n    }\n    getAverageFatigue(userMetrics) {\n        if (!userMetrics.length)\n            return 0;\n        // Calculate fatigue based on blink rate and fatigue index\n        const totalFatigue = userMetrics.reduce((sum, metric) => {\n            const blinkFatigue = metric.blinkRate < 15 ? 0.8 : 0.2; // Low blink rate indicates fatigue\n            const indexFatigue = metric.fatigueIndex / 100; // Convert to 0-1 scale\n            return sum + Math.max(blinkFatigue, indexFatigue);\n        }, 0);\n        return Math.min(totalFatigue / userMetrics.length, 1);\n    }\n    getDailyBreakCount() {\n        // Get break count from storage or default to 0\n        return parseInt(localStorage.getItem('dailyBreakCount') || '0');\n    }\n    getTimeOfDay() {\n        const hour = new Date().getHours();\n        if (hour < 12)\n            return 'morning';\n        if (hour < 17)\n            return 'afternoon';\n        return 'evening';\n    }\n    async callChromeAI(prompt, language) {\n        // This method is kept for compatibility but uses Chrome AI internally\n        try {\n            const response = await ChromeAIService.translateText(prompt, language);\n            return { content: response };\n        }\n        catch (error) {\n            throw new Error(`Chrome AI error: ${error}`);\n        }\n    }\n    buildPrompt(breakType, userMetrics, settings) {\n        const latestMetrics = userMetrics[userMetrics.length - 1];\n        const avgFatigue = userMetrics.slice(-5).reduce((sum, m) => sum + m.fatigueIndex, 0) / 5;\n        let prompt = `Generate a ${breakType} break coaching script for a user with:\n`;\n        prompt += `- Current fatigue level: ${Math.round(avgFatigue * 100)}%\n`;\n        prompt += `- Blink rate: ${latestMetrics?.blinkRate || 'unknown'} blinks/min\n`;\n        prompt += `- Posture: ${latestMetrics?.posture || 'unknown'}\n`;\n        prompt += `- Break duration: ${this.calculateDuration(breakType)} seconds\n\n`;\n        switch (breakType) {\n            case BreakType.MICRO:\n                prompt += 'Focus on quick eye exercises and blinking. Be concise and direct.';\n                break;\n            case BreakType.SHORT:\n                prompt += 'Include 20-20-20 rule guidance and simple stretches. Be encouraging.';\n                break;\n            case BreakType.LONG:\n                prompt += 'Provide comprehensive relaxation guidance including eye massage and posture correction.';\n                break;\n        }\n        return prompt;\n    }\n    buildMotivationalPrompt(eyeHealthScore, streak, settings) {\n        let prompt = `Generate a motivational message for a user with:\n`;\n        prompt += `- Eye health score: ${eyeHealthScore}/100\n`;\n        prompt += `- Current streak: ${streak} days\n`;\n        prompt += `- Daily break goal: ${settings.dailyBreakGoal}\n\n`;\n        if (eyeHealthScore >= 80) {\n            prompt += 'Celebrate their excellent progress and encourage consistency.';\n        }\n        else if (eyeHealthScore >= 60) {\n            prompt += 'Acknowledge improvement and provide gentle encouragement.';\n        }\n        else {\n            prompt += 'Provide supportive motivation and simple actionable tips.';\n        }\n        return prompt;\n    }\n    buildSummaryPrompt(weeklyData, settings) {\n        let prompt = `Generate a weekly eye health summary for:\n`;\n        prompt += `- Average eye health score: ${weeklyData.avgEyeHealthScore}/100\n`;\n        prompt += `- Total breaks taken: ${weeklyData.totalBreaks}\n`;\n        prompt += `- Screen time: ${Math.round(weeklyData.totalScreenTime / 60)} hours\n`;\n        prompt += `- Trend: ${weeklyData.eyeHealthTrend}\n\n`;\n        prompt += 'Provide insights, celebrate achievements, and suggest improvements for next week.';\n        return prompt;\n    }\n    getScriptType(breakType) {\n        switch (breakType) {\n            case BreakType.MICRO:\n                return 'instruction';\n            case BreakType.SHORT:\n                return 'motivation';\n            case BreakType.LONG:\n                return 'relaxation';\n            default:\n                return 'instruction';\n        }\n    }\n    calculateDuration(breakType) {\n        switch (breakType) {\n            case BreakType.MICRO:\n                return 20;\n            case BreakType.SHORT:\n                return 300; // 5 minutes\n            case BreakType.LONG:\n                return 900; // 15 minutes\n            default:\n                return 20;\n        }\n    }\n    generateCacheKey(breakType, userMetrics, settings) {\n        const latest = userMetrics[userMetrics.length - 1];\n        const fatigueLevel = Math.round((latest?.fatigueIndex || 0) * 10) / 10;\n        return `${breakType}-${fatigueLevel}-${settings.language}`;\n    }\n    generateId() {\n        return `script_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    getFallbackScript(breakType, language) {\n        const fallbacks = {\n            en: {\n                [BreakType.MICRO]: \"Take a moment to blink slowly 10 times. Look away from your screen and focus on something 20 feet away for 20 seconds.\",\n                [BreakType.SHORT]: \"It's time for a 5-minute break! Stand up, stretch your arms above your head, and do some gentle neck rolls. Remember the 20-20-20 rule: every 20 minutes, look at something 20 feet away for 20 seconds.\",\n                [BreakType.LONG]: \"Great job taking a longer break! Spend the next 15 minutes away from all screens. Try some gentle eye massage, drink water, and do some light stretching. Your eyes will thank you!\"\n            },\n            zh: {\n                [BreakType.MICRO]: \"花一点时间慢慢眨眼10次。将视线从屏幕上移开，专注于20英尺外的物体20秒钟。\",\n                [BreakType.SHORT]: \"是时候休息5分钟了！站起来，将手臂举过头顶，做一些轻柔的颈部转动。记住20-20-20法则：每20分钟，看20英尺外的物体20秒钟。\",\n                [BreakType.LONG]: \"很好，你选择了更长的休息时间！接下来15分钟远离所有屏幕。尝试一些轻柔的眼部按摩，喝水，做一些轻度拉伸。你的眼睛会感谢你的！\"\n            }\n        };\n        const scripts = fallbacks[language] || fallbacks.en;\n        return {\n            id: this.generateId(),\n            type: this.getScriptType(breakType),\n            content: scripts[breakType],\n            duration: this.calculateDuration(breakType),\n            language,\n            generated: Date.now()\n        };\n    }\n    getFallbackMotivation(eyeHealthScore, language) {\n        const motivations = {\n            en: {\n                high: \"Excellent work! Your eye health is in great shape. Keep up the fantastic habits!\",\n                medium: \"You're making good progress! A few more breaks each day will boost your eye health even more.\",\n                low: \"Every small step counts! Start with just one extra break today and build from there.\"\n            },\n            zh: {\n                high: \"做得很好！你的眼部健康状况很好。继续保持这些好习惯！\",\n                medium: \"你正在取得良好的进展！每天多休息几次会让你的眼部健康更上一层楼。\",\n                low: \"每一小步都很重要！从今天开始多休息一次，然后逐步改善。\"\n            }\n        };\n        const msgs = motivations[language] || motivations.en;\n        if (eyeHealthScore >= 80)\n            return msgs.high;\n        if (eyeHealthScore >= 60)\n            return msgs.medium;\n        return msgs.low;\n    }\n    getFallbackSummary(weeklyData, language) {\n        const summaries = {\n            en: `This week you took ${weeklyData.totalBreaks} breaks and maintained an average eye health score of ${weeklyData.avgEyeHealthScore}/100. Keep building on this progress!`,\n            zh: `本周你休息了${weeklyData.totalBreaks}次，平均眼部健康得分为${weeklyData.avgEyeHealthScore}/100。继续保持这个进步！`\n        };\n        return summaries[language] || summaries.en;\n    }\n}\n/**\n * Break Activity Generator\n * Provides structured break activities and guidance\n */\nexport class BreakActivityGenerator {\n    /**\n     * Generate activities for a break session\n     */\n    static generateActivities(breakType, language = 'en') {\n        switch (breakType) {\n            case BreakType.MICRO:\n                return this.getMicroBreakActivities(language);\n            case BreakType.SHORT:\n                return this.getShortBreakActivities(language);\n            case BreakType.LONG:\n                return this.getLongBreakActivities(language);\n            default:\n                return this.getMicroBreakActivities(language);\n        }\n    }\n    static getMicroBreakActivities(language) {\n        const activities = {\n            en: [\n                {\n                    type: 'exercise',\n                    name: 'Conscious Blinking',\n                    duration: 10,\n                    instructions: 'Blink slowly and deliberately 10 times'\n                },\n                {\n                    type: 'exercise',\n                    name: '20-20-20 Rule',\n                    duration: 20,\n                    instructions: 'Look at something 20 feet away for 20 seconds'\n                }\n            ],\n            zh: [\n                {\n                    type: 'exercise',\n                    name: '有意识眨眼',\n                    duration: 10,\n                    instructions: '缓慢而有意识地眨眼10次'\n                },\n                {\n                    type: 'exercise',\n                    name: '20-20-20法则',\n                    duration: 20,\n                    instructions: '看20英尺外的物体20秒钟'\n                }\n            ]\n        };\n        return activities[language] || activities.en;\n    }\n    static getShortBreakActivities(language) {\n        const activities = {\n            en: [\n                {\n                    type: 'exercise',\n                    name: 'Eye Circles',\n                    duration: 30,\n                    instructions: 'Slowly roll your eyes in circles, 5 times each direction'\n                },\n                {\n                    type: 'massage',\n                    name: 'Temple Massage',\n                    duration: 60,\n                    instructions: 'Gently massage your temples in circular motions'\n                },\n                {\n                    type: 'exercise',\n                    name: 'Neck Stretch',\n                    duration: 45,\n                    instructions: 'Gently stretch your neck side to side and up and down'\n                },\n                {\n                    type: 'hydration',\n                    name: 'Hydration Break',\n                    duration: 30,\n                    instructions: 'Drink a glass of water to stay hydrated'\n                }\n            ],\n            zh: [\n                {\n                    type: 'exercise',\n                    name: '眼球转动',\n                    duration: 30,\n                    instructions: '缓慢转动眼球，每个方向5次'\n                },\n                {\n                    type: 'massage',\n                    name: '太阳穴按摩',\n                    duration: 60,\n                    instructions: '轻柔地以圆周运动按摩太阳穴'\n                },\n                {\n                    type: 'exercise',\n                    name: '颈部拉伸',\n                    duration: 45,\n                    instructions: '轻柔地左右、上下拉伸颈部'\n                },\n                {\n                    type: 'hydration',\n                    name: '补水休息',\n                    duration: 30,\n                    instructions: '喝一杯水保持水分'\n                }\n            ]\n        };\n        return activities[language] || activities.en;\n    }\n    static getLongBreakActivities(language) {\n        const activities = {\n            en: [\n                {\n                    type: 'massage',\n                    name: 'TCM Eye Massage',\n                    duration: 180,\n                    instructions: 'Follow the guided TCM massage points: Zan Zhu, Si Bai, Jing Ming'\n                },\n                {\n                    type: 'exercise',\n                    name: 'Full Body Stretch',\n                    duration: 120,\n                    instructions: 'Stand up and do a full body stretch routine'\n                },\n                {\n                    type: 'exercise',\n                    name: 'Deep Breathing',\n                    duration: 90,\n                    instructions: 'Practice deep breathing exercises to relax'\n                },\n                {\n                    type: 'hydration',\n                    name: 'Mindful Hydration',\n                    duration: 60,\n                    instructions: 'Drink water mindfully and take a moment to rest'\n                },\n                {\n                    type: 'exercise',\n                    name: 'Eye Palming',\n                    duration: 120,\n                    instructions: 'Cover your eyes with palms and relax in darkness'\n                }\n            ],\n            zh: [\n                {\n                    type: 'massage',\n                    name: '中医眼部按摩',\n                    duration: 180,\n                    instructions: '按照指导进行中医按摩穴位：攒竹、四白、睛明'\n                },\n                {\n                    type: 'exercise',\n                    name: '全身拉伸',\n                    duration: 120,\n                    instructions: '站起来做全身拉伸运动'\n                },\n                {\n                    type: 'exercise',\n                    name: '深呼吸',\n                    duration: 90,\n                    instructions: '练习深呼吸放松身心'\n                },\n                {\n                    type: 'hydration',\n                    name: '正念补水',\n                    duration: 60,\n                    instructions: '专心喝水，花一点时间休息'\n                },\n                {\n                    type: 'exercise',\n                    name: '眼部掌敷',\n                    duration: 120,\n                    instructions: '用手掌覆盖眼部，在黑暗中放松'\n                }\n            ]\n        };\n        return activities[language] || activities.en;\n    }\n}\n/**\n * Text-to-Speech Service\n * Handles audio coaching using Web Speech API\n */\nexport class TextToSpeechService {\n    constructor() {\n        this.currentUtterance = null;\n        this.synthesis = window.speechSynthesis;\n    }\n    /**\n     * Speak coaching script content\n     */\n    speak(text, language = 'en-US', rate = 1.0) {\n        return new Promise((resolve, reject) => {\n            if (!this.synthesis) {\n                reject(new Error('Speech synthesis not supported'));\n                return;\n            }\n            // Stop any current speech\n            this.stop();\n            const utterance = new SpeechSynthesisUtterance(text);\n            utterance.lang = language;\n            utterance.rate = rate;\n            utterance.pitch = 1.0;\n            utterance.volume = 1.0;\n            utterance.onend = () => {\n                this.currentUtterance = null;\n                resolve();\n            };\n            utterance.onerror = (event) => {\n                this.currentUtterance = null;\n                reject(new Error(`Speech synthesis error: ${event.error}`));\n            };\n            this.currentUtterance = utterance;\n            this.synthesis.speak(utterance);\n        });\n    }\n    /**\n     * Stop current speech\n     */\n    stop() {\n        if (this.synthesis && this.synthesis.speaking) {\n            this.synthesis.cancel();\n        }\n        this.currentUtterance = null;\n    }\n    /**\n     * Pause current speech\n     */\n    pause() {\n        if (this.synthesis && this.synthesis.speaking) {\n            this.synthesis.pause();\n        }\n    }\n    /**\n     * Resume paused speech\n     */\n    resume() {\n        if (this.synthesis && this.synthesis.paused) {\n            this.synthesis.resume();\n        }\n    }\n    /**\n     * Check if currently speaking\n     */\n    isSpeaking() {\n        return this.synthesis ? this.synthesis.speaking : false;\n    }\n    /**\n     * Get available voices\n     */\n    getVoices() {\n        return this.synthesis ? this.synthesis.getVoices() : [];\n    }\n}\n","/**\n * Core Metrics Module\n * Handles eye health calculations, scoring, and data aggregation\n */\n/**\n * Eye Health Scoring System\n * Calculates a comprehensive score (0-100) based on multiple factors\n */\nexport class EyeHealthScorer {\n    /**\n     * Calculate overall eye health score\n     */\n    static calculateScore(metrics) {\n        if (metrics.length === 0) {\n            return {\n                overall: 50,\n                components: {\n                    eyeStrain: 50,\n                    blinkHealth: 50,\n                    postureHealth: 50,\n                    fatigueLevel: 50\n                },\n                trend: 'stable',\n                recommendations: ['Start monitoring your eye health']\n            };\n        }\n        const latest = metrics[metrics.length - 1];\n        const avgMetrics = this.calculateAverages(metrics.slice(-10)); // Last 10 readings\n        const eyeStrainScore = this.calculateEyeStrainScore(avgMetrics.earValue, avgMetrics.perclosValue);\n        const blinkHealthScore = this.calculateBlinkHealthScore(avgMetrics.blinkRate);\n        const postureScore = this.calculatePostureScore(latest.posture);\n        const fatigueScore = 100 - (avgMetrics.fatigueIndex * 100);\n        const overall = Math.round(eyeStrainScore * this.WEIGHTS.EAR +\n            eyeStrainScore * this.WEIGHTS.PERCLOS +\n            blinkHealthScore * this.WEIGHTS.BLINK_RATE +\n            postureScore * this.WEIGHTS.POSTURE +\n            fatigueScore * this.WEIGHTS.FATIGUE);\n        const trend = this.calculateTrend(metrics);\n        const recommendations = this.generateRecommendations({\n            eyeStrain: eyeStrainScore,\n            blinkHealth: blinkHealthScore,\n            postureHealth: postureScore,\n            fatigueLevel: fatigueScore\n        });\n        return {\n            overall: Math.max(0, Math.min(100, overall)),\n            components: {\n                eyeStrain: eyeStrainScore,\n                blinkHealth: blinkHealthScore,\n                postureHealth: postureScore,\n                fatigueLevel: fatigueScore\n            },\n            trend,\n            recommendations\n        };\n    }\n    static calculateAverages(metrics) {\n        const sum = metrics.reduce((acc, m) => ({\n            earValue: acc.earValue + m.earValue,\n            perclosValue: acc.perclosValue + m.perclosValue,\n            blinkRate: acc.blinkRate + m.blinkRate,\n            fatigueIndex: acc.fatigueIndex + m.fatigueIndex\n        }), { earValue: 0, perclosValue: 0, blinkRate: 0, fatigueIndex: 0 });\n        const count = metrics.length;\n        return {\n            earValue: sum.earValue / count,\n            perclosValue: sum.perclosValue / count,\n            blinkRate: sum.blinkRate / count,\n            fatigueIndex: sum.fatigueIndex / count\n        };\n    }\n    static calculateEyeStrainScore(earValue, perclosValue) {\n        const earScore = this.scoreByThreshold(earValue, this.THRESHOLDS.EAR, true);\n        const perclosScore = this.scoreByThreshold(perclosValue, this.THRESHOLDS.PERCLOS, false);\n        return Math.round((earScore + perclosScore) / 2);\n    }\n    static calculateBlinkHealthScore(blinkRate) {\n        const thresholds = this.THRESHOLDS.BLINK_RATE;\n        if (blinkRate >= thresholds.EXCELLENT.min && blinkRate <= thresholds.EXCELLENT.max) {\n            return 90;\n        }\n        else if (blinkRate >= thresholds.GOOD.min && blinkRate <= thresholds.GOOD.max) {\n            return 75;\n        }\n        else if (blinkRate >= thresholds.FAIR.min && blinkRate <= thresholds.FAIR.max) {\n            return 60;\n        }\n        else {\n            return 40;\n        }\n    }\n    static calculatePostureScore(posture) {\n        switch (posture) {\n            case 'excellent': return 95;\n            case 'good': return 80;\n            case 'fair': return 65;\n            case 'poor': return 45;\n            case 'very_poor': return 25;\n            default: return 50;\n        }\n    }\n    static scoreByThreshold(value, thresholds, higherIsBetter) {\n        if (higherIsBetter) {\n            if (value >= thresholds.EXCELLENT)\n                return 90;\n            if (value >= thresholds.GOOD)\n                return 75;\n            if (value >= thresholds.FAIR)\n                return 60;\n            return 40;\n        }\n        else {\n            if (value <= thresholds.EXCELLENT)\n                return 90;\n            if (value <= thresholds.GOOD)\n                return 75;\n            if (value <= thresholds.FAIR)\n                return 60;\n            return 40;\n        }\n    }\n    static calculateTrend(metrics) {\n        if (metrics.length < 5)\n            return 'stable';\n        const recent = metrics.slice(-5);\n        const older = metrics.slice(-10, -5);\n        if (older.length === 0)\n            return 'stable';\n        const recentAvg = recent.reduce((sum, m) => sum + (1 - m.fatigueIndex), 0) / recent.length;\n        const olderAvg = older.reduce((sum, m) => sum + (1 - m.fatigueIndex), 0) / older.length;\n        const difference = recentAvg - olderAvg;\n        if (difference > 0.05)\n            return 'improving';\n        if (difference < -0.05)\n            return 'declining';\n        return 'stable';\n    }\n    static generateRecommendations(scores) {\n        const recommendations = [];\n        if (scores.eyeStrain < 60) {\n            recommendations.push('Take more frequent breaks to reduce eye strain');\n            recommendations.push('Adjust screen brightness and contrast');\n        }\n        if (scores.blinkHealth < 60) {\n            recommendations.push('Practice conscious blinking exercises');\n            recommendations.push('Use artificial tears if eyes feel dry');\n        }\n        if (scores.postureHealth < 60) {\n            recommendations.push('Improve your sitting posture');\n            recommendations.push('Adjust monitor height to eye level');\n        }\n        if (scores.fatigueLevel < 60) {\n            recommendations.push('Get adequate sleep (7-9 hours)');\n            recommendations.push('Take longer breaks between work sessions');\n        }\n        if (recommendations.length === 0) {\n            recommendations.push('Great job! Keep maintaining healthy eye habits');\n        }\n        return recommendations;\n    }\n}\nEyeHealthScorer.WEIGHTS = {\n    EAR: 0.25, // Eye Aspect Ratio\n    PERCLOS: 0.30, // Percentage of Eye Closure\n    BLINK_RATE: 0.20, // Blink frequency\n    POSTURE: 0.15, // Head posture\n    FATIGUE: 0.10 // Overall fatigue index\n};\nEyeHealthScorer.THRESHOLDS = {\n    EAR: {\n        EXCELLENT: 0.25,\n        GOOD: 0.22,\n        FAIR: 0.18,\n        POOR: 0.15\n    },\n    PERCLOS: {\n        EXCELLENT: 0.15,\n        GOOD: 0.20,\n        FAIR: 0.30,\n        POOR: 0.40\n    },\n    BLINK_RATE: {\n        EXCELLENT: { min: 15, max: 20 },\n        GOOD: { min: 12, max: 25 },\n        FAIR: { min: 8, max: 30 },\n        POOR: { min: 0, max: 50 }\n    }\n};\n/**\n * Daily KPI Calculator\n * Aggregates daily metrics and calculates key performance indicators\n */\nexport class DailyKPICalculator {\n    /**\n     * Calculate daily KPIs from metrics and break sessions\n     */\n    static calculateDailyKPIs(metrics, breakSessions, date = new Date()) {\n        const dayStart = new Date(date);\n        dayStart.setHours(0, 0, 0, 0);\n        const dayEnd = new Date(date);\n        dayEnd.setHours(23, 59, 59, 999);\n        // Filter data for the specific day\n        const dayMetrics = metrics.filter(m => {\n            const metricDate = new Date(m.timestamp);\n            return metricDate >= dayStart && metricDate <= dayEnd;\n        });\n        const dayBreaks = breakSessions.filter(b => {\n            const breakDate = new Date(b.startTime);\n            return breakDate >= dayStart && breakDate <= dayEnd;\n        });\n        // Calculate screen time (approximate from metrics frequency)\n        const screenTimeMinutes = dayMetrics.length > 0\n            ? Math.round((dayMetrics.length * 30) / 60) // Assuming 30-second intervals\n            : 0;\n        // Calculate break statistics\n        const totalBreaks = dayBreaks.length;\n        const completedBreaks = dayBreaks.filter(b => b.completed).length;\n        const totalBreakTime = dayBreaks.reduce((sum, b) => sum + (b.duration || 0), 0);\n        // Calculate average metrics\n        const avgMetrics = dayMetrics.length > 0 ? {\n            earValue: dayMetrics.reduce((sum, m) => sum + m.earValue, 0) / dayMetrics.length,\n            perclosValue: dayMetrics.reduce((sum, m) => sum + m.perclosValue, 0) / dayMetrics.length,\n            blinkRate: dayMetrics.reduce((sum, m) => sum + m.blinkRate, 0) / dayMetrics.length,\n            fatigueIndex: dayMetrics.reduce((sum, m) => sum + m.fatigueIndex, 0) / dayMetrics.length\n        } : null;\n        // Calculate eye health score\n        const eyeHealthScore = EyeHealthScorer.calculateScore(dayMetrics);\n        return {\n            date: date.toISOString().split('T')[0],\n            screenTime: screenTimeMinutes,\n            totalBreaks,\n            completedBreaks,\n            breakCompletionRate: totalBreaks > 0 ? (completedBreaks / totalBreaks) * 100 : 0,\n            totalBreakTime,\n            averageMetrics: avgMetrics,\n            eyeHealthScore: eyeHealthScore.overall,\n            recommendations: eyeHealthScore.recommendations,\n            alerts: this.generateAlerts(avgMetrics, totalBreaks, screenTimeMinutes)\n        };\n    }\n    static generateAlerts(avgMetrics, totalBreaks, screenTime) {\n        const alerts = [];\n        if (screenTime > 480) { // More than 8 hours\n            alerts.push('Excessive screen time detected');\n        }\n        if (totalBreaks < 3 && screenTime > 120) { // Less than 3 breaks in 2+ hours\n            alerts.push('Take more frequent breaks');\n        }\n        if (avgMetrics && avgMetrics.fatigueIndex > 0.7) {\n            alerts.push('High fatigue levels detected');\n        }\n        if (avgMetrics && avgMetrics.perclosValue > 0.3) {\n            alerts.push('Excessive eye closure detected');\n        }\n        return alerts;\n    }\n}\n/**\n * Weekly Summary Generator\n * Creates weekly summaries and trends\n */\nexport class WeeklySummaryGenerator {\n    /**\n     * Generate weekly summary data\n     */\n    static generateWeeklySummary(metrics, breakSessions, weekStart) {\n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekEnd.getDate() + 6);\n        weekEnd.setHours(23, 59, 59, 999);\n        // Generate daily KPIs for each day of the week\n        const dailyKPIs = [];\n        for (let i = 0; i < 7; i++) {\n            const currentDay = new Date(weekStart);\n            currentDay.setDate(currentDay.getDate() + i);\n            const dayKPIs = DailyKPICalculator.calculateDailyKPIs(metrics, breakSessions, currentDay);\n            dailyKPIs.push(dayKPIs);\n        }\n        // Calculate weekly aggregates\n        const totalScreenTime = dailyKPIs.reduce((sum, day) => sum + day.screenTime, 0);\n        const totalBreaks = dailyKPIs.reduce((sum, day) => sum + day.totalBreaks, 0);\n        const avgEyeHealthScore = dailyKPIs.reduce((sum, day) => sum + day.eyeHealthScore, 0) / 7;\n        // Calculate trends\n        const eyeHealthTrend = this.calculateWeeklyTrend(dailyKPIs.map(day => day.eyeHealthScore));\n        const screenTimeTrend = this.calculateWeeklyTrend(dailyKPIs.map(day => day.screenTime));\n        return {\n            weekStart: weekStart.toISOString().split('T')[0],\n            weekEnd: weekEnd.toISOString().split('T')[0],\n            dailyKPIs,\n            summary: {\n                totalScreenTime,\n                avgDailyScreenTime: Math.round(totalScreenTime / 7),\n                totalBreaks,\n                avgEyeHealthScore: Math.round(avgEyeHealthScore),\n                eyeHealthTrend,\n                screenTimeTrend\n            },\n            insights: this.generateWeeklyInsights(dailyKPIs)\n        };\n    }\n    static calculateWeeklyTrend(values) {\n        if (values.length < 2)\n            return 'stable';\n        const firstHalf = values.slice(0, Math.floor(values.length / 2));\n        const secondHalf = values.slice(Math.floor(values.length / 2));\n        const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\n        const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\n        const difference = secondAvg - firstAvg;\n        const threshold = firstAvg * 0.1; // 10% threshold\n        if (difference > threshold)\n            return 'improving';\n        if (difference < -threshold)\n            return 'declining';\n        return 'stable';\n    }\n    static generateWeeklyInsights(dailyKPIs) {\n        const insights = [];\n        // Find best and worst days\n        const bestDay = dailyKPIs.reduce((best, day) => day.eyeHealthScore > best.eyeHealthScore ? day : best);\n        const worstDay = dailyKPIs.reduce((worst, day) => day.eyeHealthScore < worst.eyeHealthScore ? day : worst);\n        insights.push(`Best eye health day: ${new Date(bestDay.date).toLocaleDateString('en-US', { weekday: 'long' })}`);\n        insights.push(`Most challenging day: ${new Date(worstDay.date).toLocaleDateString('en-US', { weekday: 'long' })}`);\n        // Screen time insights\n        const avgScreenTime = dailyKPIs.reduce((sum, day) => sum + day.screenTime, 0) / 7;\n        if (avgScreenTime > 360) { // More than 6 hours average\n            insights.push('Consider reducing daily screen time');\n        }\n        // Break consistency\n        const daysWithGoodBreaks = dailyKPIs.filter(day => day.breakCompletionRate > 70).length;\n        if (daysWithGoodBreaks < 5) {\n            insights.push('Try to maintain consistent break habits throughout the week');\n        }\n        return insights;\n    }\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * Camera Permission Popup Component\n * Shows when camera access is detected, allows user to approve or reject\n */\nimport { useState, useEffect } from 'react';\nimport { ChromeStorageService } from '../../core/storage/index';\nconst CameraPermissionPopup = ({ isVisible, onApprove, onReject, onClose }) => {\n    const [isAnimating, setIsAnimating] = useState(false);\n    useEffect(() => {\n        if (isVisible) {\n            setIsAnimating(true);\n        }\n    }, [isVisible]);\n    const handleApprove = async () => {\n        try {\n            // Update settings to allow camera access\n            await ChromeStorageService.updateSettings({\n                cameraEnabled: true,\n                metricsOnly: false // Allow full functionality\n            });\n            onApprove();\n            handleClose();\n        }\n        catch (error) {\n            console.error('Failed to approve camera access:', error);\n        }\n    };\n    const handleReject = async () => {\n        try {\n            // Update settings to restrict features to alarm-only\n            await ChromeStorageService.updateSettings({\n                cameraEnabled: false,\n                metricsOnly: true // Restrict to basic functionality\n            });\n            onReject();\n            handleClose();\n        }\n        catch (error) {\n            console.error('Failed to reject camera access:', error);\n        }\n    };\n    const handleClose = () => {\n        setIsAnimating(false);\n        setTimeout(() => {\n            onClose();\n        }, 200);\n    };\n    if (!isVisible)\n        return null;\n    return (_jsxs(\"div\", { className: \"fixed inset-0 z-50 flex items-center justify-center\", children: [_jsx(\"div\", { className: `absolute inset-0 bg-black transition-opacity duration-200 ${isAnimating ? 'opacity-50' : 'opacity-0'}`, onClick: handleClose }), _jsxs(\"div\", { className: `relative bg-white rounded-lg shadow-xl max-w-sm mx-4 transform transition-all duration-200 ${isAnimating ? 'scale-100 opacity-100' : 'scale-95 opacity-0'}`, children: [_jsx(\"div\", { className: \"bg-gradient-to-r from-green-600 to-emerald-600 text-white p-4 rounded-t-lg\", children: _jsxs(\"div\", { className: \"flex items-center space-x-3\", children: [_jsx(\"div\", { className: \"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\", children: _jsx(\"svg\", { className: \"w-5 h-5\", fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", children: _jsx(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\" }) }) }), _jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-lg font-semibold\", children: \"Camera Access Detected\" }), _jsx(\"p\", { className: \"text-sm opacity-90\", children: \"EyeZen wants to monitor your eye health\" })] })] }) }), _jsxs(\"div\", { className: \"p-6\", children: [_jsxs(\"div\", { className: \"mb-4\", children: [_jsxs(\"div\", { className: \"flex items-center space-x-2 mb-3\", children: [_jsx(\"div\", { className: \"w-3 h-3 bg-green-500 rounded-full animate-pulse\" }), _jsx(\"span\", { className: \"text-sm font-medium text-gray-700\", children: \"Camera is currently active\" })] }), _jsx(\"p\", { className: \"text-gray-600 text-sm leading-relaxed\", children: \"EyeZen uses your camera to detect eye fatigue and provide personalized break recommendations. Your privacy is protected - no video is recorded or transmitted.\" })] }), _jsx(\"div\", { className: \"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4\", children: _jsxs(\"div\", { className: \"flex items-start space-x-2\", children: [_jsx(\"svg\", { className: \"w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0\", fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", children: _jsx(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z\" }) }), _jsxs(\"div\", { children: [_jsx(\"p\", { className: \"text-sm font-medium text-yellow-800\", children: \"Important Choice\" }), _jsx(\"p\", { className: \"text-xs text-yellow-700 mt-1\", children: \"If you reject camera access, you'll only be able to use the set alarm feature.\" })] })] }) })] }), _jsxs(\"div\", { className: \"px-6 pb-6\", children: [_jsxs(\"div\", { className: \"flex space-x-3\", children: [_jsx(\"button\", { onClick: handleReject, className: \"flex-1 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-300\", children: \"Reject\" }), _jsx(\"button\", { onClick: handleApprove, className: \"flex-1 px-4 py-2 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-green-300\", children: \"OK\" })] }), _jsx(\"p\", { className: \"text-xs text-gray-500 text-center mt-3 whitespace-nowrap\", children: \"You can change this setting anytime in the extension options.\" })] })] })] }));\n};\nexport default CameraPermissionPopup;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nconst LoginModal = ({ isVisible, onClose, onLogin, onSignup }) => {\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [name, setName] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [emailSent, setEmailSent] = useState(false);\n    const [verificationCode, setVerificationCode] = useState('');\n    const [showVerification, setShowVerification] = useState(false);\n    const [generatedCode, setGeneratedCode] = useState('');\n    const [showForgotPassword, setShowForgotPassword] = useState(false);\n    const [resetCode, setResetCode] = useState('');\n    const [newPassword, setNewPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [showPasswordReset, setShowPasswordReset] = useState(false);\n    if (!isVisible)\n        return null;\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        setError('');\n        try {\n            if (isLoginMode) {\n                // Regular login with password\n                await onLogin(email, password);\n                onClose();\n            }\n            else {\n                // Signup - send verification email\n                await new Promise(resolve => setTimeout(resolve, 1500));\n                // Generate a random 6-digit code\n                const code = Math.floor(100000 + Math.random() * 900000).toString();\n                setGeneratedCode(code);\n                setEmailSent(true);\n                setShowVerification(true);\n                console.log(`Verification code sent to ${email}: ${code}`);\n            }\n        }\n        catch (err) {\n            setError(err instanceof Error ? err.message : 'An error occurred');\n        }\n        finally {\n            setIsLoading(false);\n        }\n    };\n    const handleVerificationSubmit = async (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        setError('');\n        try {\n            if (verificationCode === generatedCode) {\n                // Code is correct, complete signup\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                onSignup(email, password, name);\n                onClose();\n                resetForm();\n            }\n            else {\n                setError('Invalid verification code. Please try again.');\n            }\n        }\n        catch (err) {\n            setError(err instanceof Error ? err.message : 'An error occurred');\n        }\n        finally {\n            setIsLoading(false);\n        }\n    };\n    const handleForgotPassword = async (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        setError('');\n        try {\n            // Check if user exists\n            const result = await chrome.storage.local.get(['eyezen_users']);\n            const users = result.eyezen_users || {};\n            if (!users[email]) {\n                throw new Error('No account found with this email address.');\n            }\n            // Generate reset code\n            await new Promise(resolve => setTimeout(resolve, 1500));\n            const code = Math.floor(100000 + Math.random() * 900000).toString();\n            setResetCode(code);\n            setShowPasswordReset(true);\n            console.log(`Password reset code sent to ${email}: ${code}`);\n        }\n        catch (err) {\n            setError(err instanceof Error ? err.message : 'An error occurred');\n        }\n        finally {\n            setIsLoading(false);\n        }\n    };\n    const handlePasswordReset = async (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        setError('');\n        try {\n            if (verificationCode !== resetCode) {\n                throw new Error('Invalid reset code. Please try again.');\n            }\n            if (newPassword.length < 6) {\n                throw new Error('Password must be at least 6 characters long.');\n            }\n            if (newPassword !== confirmPassword) {\n                throw new Error('Passwords do not match.');\n            }\n            // Update user password\n            const result = await chrome.storage.local.get(['eyezen_users']);\n            const users = result.eyezen_users || {};\n            if (users[email]) {\n                users[email].password = newPassword;\n                await chrome.storage.local.set({ 'eyezen_users': users });\n                // Reset form and show success\n                resetForm();\n                setShowForgotPassword(false);\n                alert('Password reset successfully! You can now login with your new password.');\n            }\n        }\n        catch (err) {\n            setError(err instanceof Error ? err.message : 'An error occurred');\n        }\n        finally {\n            setIsLoading(false);\n        }\n    };\n    const resetForm = () => {\n        setEmail('');\n        setPassword('');\n        setName('');\n        setError('');\n        setEmailSent(false);\n        setVerificationCode('');\n        setShowVerification(false);\n        setGeneratedCode('');\n        setShowForgotPassword(false);\n        setResetCode('');\n        setNewPassword('');\n        setConfirmPassword('');\n        setShowPasswordReset(false);\n    };\n    const switchMode = () => {\n        setIsLoginMode(!isLoginMode);\n        resetForm();\n    };\n    const handleBackdropClick = (e) => {\n        // Only close if clicking the backdrop, not the modal content\n        if (e.target === e.currentTarget) {\n            onClose();\n        }\n    };\n    return (_jsx(\"div\", { className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\", onClick: handleBackdropClick, children: _jsxs(\"div\", { className: \"bg-white rounded-lg p-6 w-80 max-w-sm mx-4\", onClick: (e) => e.stopPropagation(), children: [_jsxs(\"div\", { className: \"flex justify-between items-center mb-4\", children: [_jsx(\"h2\", { className: \"text-xl font-bold text-gray-800\", children: showForgotPassword ? 'Reset Password' : (isLoginMode ? 'Login' : 'Sign Up') }), _jsx(\"button\", { onClick: onClose, className: \"text-gray-500 hover:text-gray-700 text-xl\", children: \"\\u00D7\" })] }), emailSent && !showVerification ? (_jsxs(\"div\", { className: \"text-center py-8\", children: [_jsx(\"div\", { className: \"mb-4\", children: _jsx(\"svg\", { className: \"w-16 h-16 text-green-500 mx-auto\", fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", children: _jsx(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" }) }) }), _jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900 mb-2\", children: \"Email Sent!\" }), _jsxs(\"p\", { className: \"text-gray-600 mb-4\", children: [\"We've sent a verification code to \", _jsx(\"strong\", { children: email }), \". Please check your inbox for the 6-digit code.\"] }), _jsx(\"p\", { className: \"text-sm text-gray-500\", children: \"Don't see the email? Check your spam folder.\" }), _jsx(\"button\", { onClick: () => setShowVerification(true), className: \"mt-4 bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition-colors\", children: \"Enter Verification Code\" })] })) : showVerification ? (_jsxs(\"form\", { onSubmit: handleVerificationSubmit, className: \"space-y-4\", children: [_jsxs(\"div\", { className: \"text-center mb-4\", children: [_jsx(\"h3\", { className: \"text-lg font-semibold text-gray-900 mb-2\", children: \"Enter Verification Code\" }), _jsxs(\"p\", { className: \"text-gray-600 text-sm\", children: [\"We sent a 6-digit code to \", _jsx(\"strong\", { children: email })] })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Verification Code\" }), _jsx(\"input\", { type: \"text\", value: verificationCode, onChange: (e) => setVerificationCode(e.target.value.replace(/\\D/g, '').slice(0, 6)), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent text-center text-lg tracking-widest\", required: true, placeholder: \"000000\", maxLength: 6, disabled: isLoading })] }), error && (_jsx(\"div\", { className: \"text-red-600 text-sm bg-red-50 p-2 rounded\", children: error })), _jsxs(\"div\", { className: \"flex space-x-3\", children: [_jsx(\"button\", { type: \"button\", onClick: () => {\n                                        setShowVerification(false);\n                                        setEmailSent(false);\n                                        setVerificationCode('');\n                                        setError('');\n                                    }, className: \"flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition-colors\", children: \"Back\" }), _jsx(\"button\", { type: \"submit\", disabled: isLoading || verificationCode.length !== 6, className: \"flex-1 bg-gradient-to-r from-green-400 to-emerald-400 text-white py-2 px-4 rounded-md hover:from-green-500 hover:to-emerald-500 transition-all duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\", children: isLoading ? (_jsxs(_Fragment, { children: [_jsxs(\"svg\", { className: \"animate-spin -ml-1 mr-3 h-5 w-5 text-white\", xmlns: \"http://www.w3.org/2000/svg\", fill: \"none\", viewBox: \"0 0 24 24\", children: [_jsx(\"circle\", { className: \"opacity-25\", cx: \"12\", cy: \"12\", r: \"10\", stroke: \"currentColor\", strokeWidth: \"4\" }), _jsx(\"path\", { className: \"opacity-75\", fill: \"currentColor\", d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" })] }), \"Verifying...\"] })) : ('Verify & Sign Up') })] })] })) : showForgotPassword && !showPasswordReset ? (_jsxs(\"form\", { onSubmit: handleForgotPassword, className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Email Address\" }), _jsx(\"input\", { type: \"email\", value: email, onChange: (e) => setEmail(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: true, placeholder: \"Enter your email address\", disabled: isLoading })] }), error && (_jsx(\"div\", { className: \"text-red-600 text-sm bg-red-50 p-2 rounded\", children: error })), _jsxs(\"div\", { className: \"flex space-x-3\", children: [_jsx(\"button\", { type: \"button\", onClick: () => {\n                                        setShowForgotPassword(false);\n                                        setError('');\n                                    }, className: \"flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition-colors\", children: \"Back\" }), _jsx(\"button\", { type: \"submit\", disabled: isLoading || !email, className: \"flex-1 bg-gradient-to-r from-green-400 to-emerald-400 text-white py-2 px-4 rounded-md hover:from-green-500 hover:to-emerald-500 transition-all duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\", children: isLoading ? (_jsxs(_Fragment, { children: [_jsxs(\"svg\", { className: \"animate-spin -ml-1 mr-3 h-5 w-5 text-white\", xmlns: \"http://www.w3.org/2000/svg\", fill: \"none\", viewBox: \"0 0 24 24\", children: [_jsx(\"circle\", { className: \"opacity-25\", cx: \"12\", cy: \"12\", r: \"10\", stroke: \"currentColor\", strokeWidth: \"4\" }), _jsx(\"path\", { className: \"opacity-75\", fill: \"currentColor\", d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" })] }), \"Sending Code...\"] })) : ('Send Reset Code') })] })] })) : showPasswordReset ? (_jsxs(\"form\", { onSubmit: handlePasswordReset, className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Reset Code\" }), _jsx(\"input\", { type: \"text\", value: verificationCode, onChange: (e) => {\n                                        const value = e.target.value.replace(/\\D/g, '').slice(0, 6);\n                                        setVerificationCode(value);\n                                    }, className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent text-center text-lg tracking-widest\", placeholder: \"000000\", maxLength: 6, required: true, disabled: isLoading })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"New Password\" }), _jsx(\"input\", { type: \"password\", value: newPassword, onChange: (e) => setNewPassword(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: true, placeholder: \"Enter new password\", minLength: 6, disabled: isLoading })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Confirm New Password\" }), _jsx(\"input\", { type: \"password\", value: confirmPassword, onChange: (e) => setConfirmPassword(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: true, placeholder: \"Confirm new password\", minLength: 6, disabled: isLoading })] }), error && (_jsx(\"div\", { className: \"text-red-600 text-sm bg-red-50 p-2 rounded\", children: error })), _jsxs(\"div\", { className: \"flex space-x-3\", children: [_jsx(\"button\", { type: \"button\", onClick: () => {\n                                        setShowPasswordReset(false);\n                                        setShowForgotPassword(true);\n                                        setError('');\n                                    }, className: \"flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition-colors\", children: \"Back\" }), _jsx(\"button\", { type: \"submit\", disabled: isLoading || verificationCode.length !== 6 || !newPassword || !confirmPassword, className: \"flex-1 bg-gradient-to-r from-green-400 to-emerald-400 text-white py-2 px-4 rounded-md hover:from-green-500 hover:to-emerald-500 transition-all duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\", children: isLoading ? (_jsxs(_Fragment, { children: [_jsxs(\"svg\", { className: \"animate-spin -ml-1 mr-3 h-5 w-5 text-white\", xmlns: \"http://www.w3.org/2000/svg\", fill: \"none\", viewBox: \"0 0 24 24\", children: [_jsx(\"circle\", { className: \"opacity-25\", cx: \"12\", cy: \"12\", r: \"10\", stroke: \"currentColor\", strokeWidth: \"4\" }), _jsx(\"path\", { className: \"opacity-75\", fill: \"currentColor\", d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" })] }), \"Resetting...\"] })) : ('Reset Password') })] })] })) : (_jsxs(\"form\", { onSubmit: handleSubmit, className: \"space-y-4\", children: [!isLoginMode && (_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Name\" }), _jsx(\"input\", { type: \"text\", value: name, onChange: (e) => setName(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: !isLoginMode, placeholder: \"Enter your name\", disabled: isLoading })] })), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Email\" }), _jsx(\"input\", { type: \"email\", value: email, onChange: (e) => setEmail(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: true, placeholder: \"Enter your email\", disabled: isLoading })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"block text-sm font-medium text-gray-700 mb-1\", children: \"Password\" }), _jsx(\"input\", { type: \"password\", value: password, onChange: (e) => setPassword(e.target.value), className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent\", required: true, placeholder: \"Enter your password\", minLength: 6, disabled: isLoading })] }), error && (_jsx(\"div\", { className: \"text-red-600 text-sm bg-red-50 p-2 rounded\", children: error })), _jsx(\"button\", { type: \"submit\", disabled: isLoading, className: \"w-full bg-gradient-to-r from-green-400 to-emerald-400 text-white py-2 px-4 rounded-md hover:from-green-500 hover:to-emerald-500 transition-all duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\", children: isLoading ? (_jsxs(_Fragment, { children: [_jsxs(\"svg\", { className: \"animate-spin -ml-1 mr-3 h-5 w-5 text-white\", xmlns: \"http://www.w3.org/2000/svg\", fill: \"none\", viewBox: \"0 0 24 24\", children: [_jsx(\"circle\", { className: \"opacity-25\", cx: \"12\", cy: \"12\", r: \"10\", stroke: \"currentColor\", strokeWidth: \"4\" }), _jsx(\"path\", { className: \"opacity-75\", fill: \"currentColor\", d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" })] }), isLoginMode ? 'Logging in...' : 'Creating Account...'] })) : (isLoginMode ? 'Login' : 'Sign Up') }), isLoginMode && (_jsx(\"div\", { className: \"mt-3 text-center\", children: _jsx(\"button\", { type: \"button\", onClick: () => setShowForgotPassword(true), className: \"text-green-600 hover:text-green-700 text-sm font-medium\", children: \"Forgot Password?\" }) }))] })), !showVerification && !showForgotPassword && (_jsx(\"div\", { className: \"mt-4 text-center\", children: _jsx(\"button\", { onClick: switchMode, className: \"text-green-600 hover:text-green-700 text-sm font-medium\", children: isLoginMode ? \"Don't have an account? Sign up\" : \"Already have an account? Login\" }) }))] }) }));\n};\nexport default LoginModal;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\n/**\n * Popup Component\n * Main popup interface for the EyeZen Chrome Extension\n */\nimport { useState, useEffect } from 'react';\nimport { UserStatus, BreakType } from '../../types/index';\nimport { ChromeStorageService } from '../../core/storage/index';\nimport { AICoachService } from '../../core/coach/index';\nimport { EyeHealthScorer } from '../../core/metrics/index';\nimport CameraPermissionPopup from './CameraPermissionPopup';\nimport LoginModal from './LoginModal';\nconst Popup = ({ onStartBreak, onOpenSettings }) => {\n    const [state, setState] = useState({\n        status: UserStatus.GOOD,\n        eyeScore: {\n            current: 50,\n            daily: 50,\n            weekly: 50,\n            trend: 'stable'\n        },\n        isLoading: true,\n        cameraEnabled: true,\n        lastBreakTime: null,\n        streakDays: 0,\n        showCameraPermissionPopup: false,\n        isFeatureRestricted: false,\n        aiRecommendation: 'Analyzing your eye health patterns...',\n        recommendedBreakType: BreakType.MICRO,\n        aiLoading: true,\n        showLoginModal: false,\n        isLoggedIn: false,\n        userEmail: ''\n    });\n    useEffect(() => {\n        loadUserData();\n        loadLoginState();\n        // Set up periodic updates\n        const interval = setInterval(loadUserData, 30000); // Update every 30 seconds\n        return () => clearInterval(interval);\n    }, []);\n    const loadLoginState = async () => {\n        try {\n            if (typeof chrome !== 'undefined' && chrome.storage) {\n                const result = await chrome.storage.local.get(['eyezen_login_state']);\n                const loginState = result.eyezen_login_state;\n                if (loginState && loginState.isLoggedIn) {\n                    setState(prev => ({\n                        ...prev,\n                        isLoggedIn: true,\n                        userEmail: loginState.userEmail\n                    }));\n                }\n            }\n        }\n        catch (error) {\n            console.error('Failed to load login state:', error);\n        }\n    };\n    const loadUserData = async () => {\n        try {\n            let userData = await ChromeStorageService.getUserData();\n            // Initialize storage if no user data exists\n            if (!userData) {\n                await ChromeStorageService.initialize();\n                userData = await ChromeStorageService.getUserData();\n            }\n            if (userData) {\n                // Calculate current eye health score\n                const recentMetrics = userData.metrics.slice(-10);\n                const healthScore = EyeHealthScorer.calculateScore(recentMetrics);\n                // Determine user status based on score and recent metrics\n                const currentStatus = determineUserStatus(healthScore.overall, recentMetrics);\n                // Calculate streak days\n                const streakDays = calculateStreakDays(userData.breaks);\n                // Get last break time\n                const lastBreak = userData.breaks\n                    .filter(b => b.completed)\n                    .sort((a, b) => b.endTime - a.endTime)[0];\n                // Generate AI recommendation\n                const aiCoach = new AICoachService();\n                const avgFatigue = recentMetrics.reduce((sum, m) => sum + (m.fatigueIndex || 0), 0) / recentMetrics.length;\n                let recommendedType = BreakType.MICRO;\n                let recommendation = 'Take a quick 20-second eye break using the 20-20-20 rule.';\n                if (avgFatigue > 0.7) {\n                    recommendedType = BreakType.LONG;\n                    recommendation = 'High eye strain detected! Take a 15-minute wellness break with TCM massage.';\n                }\n                else if (avgFatigue > 0.4) {\n                    recommendedType = BreakType.SHORT;\n                    recommendation = 'Moderate eye fatigue. A 5-minute guided relaxation break is recommended.';\n                }\n                setState(prev => ({\n                    ...prev,\n                    status: currentStatus,\n                    eyeScore: {\n                        current: healthScore.overall,\n                        daily: healthScore.overall,\n                        weekly: healthScore.overall,\n                        trend: healthScore.trend\n                    },\n                    isLoading: false,\n                    cameraEnabled: userData.settings.cameraEnabled,\n                    lastBreakTime: lastBreak?.endTime || null,\n                    streakDays,\n                    showCameraPermissionPopup: false, // Only show when explicitly triggered\n                    isFeatureRestricted: userData.settings.metricsOnly,\n                    aiRecommendation: recommendation,\n                    recommendedBreakType: recommendedType,\n                    aiLoading: false,\n                    showLoginModal: false\n                    // Preserve existing login state (isLoggedIn, userEmail)\n                }));\n            }\n        }\n        catch (error) {\n            console.error('Failed to load user data:', error);\n            setState((prev) => ({ ...prev, isLoading: false }));\n        }\n    };\n    const determineUserStatus = (score, metrics) => {\n        if (score >= 80)\n            return UserStatus.GOOD;\n        if (score >= 60)\n            return UserStatus.TIRED;\n        return UserStatus.CRITICAL;\n    };\n    const calculateStreakDays = (breaks) => {\n        const today = new Date();\n        let streak = 0;\n        for (let i = 0; i < 30; i++) {\n            const checkDate = new Date(today);\n            checkDate.setDate(checkDate.getDate() - i);\n            checkDate.setHours(0, 0, 0, 0);\n            const dayEnd = new Date(checkDate);\n            dayEnd.setHours(23, 59, 59, 999);\n            const dayBreaks = breaks.filter(b => {\n                const breakDate = new Date(b.startTime);\n                return breakDate >= checkDate && breakDate <= dayEnd && b.completed;\n            });\n            if (dayBreaks.length >= 3) { // At least 3 breaks per day\n                streak++;\n            }\n            else if (i === 0) {\n                // If today doesn't have enough breaks, no streak\n                break;\n            }\n            else {\n                // Streak broken\n                break;\n            }\n        }\n        return streak;\n    };\n    const getStatusColor = (status) => {\n        switch (status) {\n            case UserStatus.GOOD:\n                return 'text-green-600';\n            case UserStatus.TIRED:\n                return 'text-yellow-600';\n            case UserStatus.CRITICAL:\n                return 'text-red-600';\n            default:\n                return 'text-gray-600';\n        }\n    };\n    const getStatusIcon = (status) => {\n        switch (status) {\n            case UserStatus.GOOD:\n                return '😊';\n            case UserStatus.TIRED:\n                return '😴';\n            case UserStatus.CRITICAL:\n                return '😵';\n            default:\n                return '😐';\n        }\n    };\n    const getScoreColor = (score) => {\n        if (score >= 80)\n            return 'text-green-600';\n        if (score >= 60)\n            return 'text-yellow-600';\n        return 'text-red-600';\n    };\n    const getTrendIcon = (trend) => {\n        switch (trend) {\n            case 'improving':\n                return '📈';\n            case 'declining':\n                return '📉';\n            default:\n                return '➡️';\n        }\n    };\n    const formatLastBreakTime = (timestamp) => {\n        if (!timestamp)\n            return 'No recent breaks';\n        const now = Date.now();\n        const diff = now - timestamp;\n        const minutes = Math.floor(diff / (1000 * 60));\n        const hours = Math.floor(minutes / 60);\n        if (hours > 0) {\n            return `${hours}h ${minutes % 60}m ago`;\n        }\n        return `${minutes}m ago`;\n    };\n    const handleBreakClick = (breakType) => {\n        onStartBreak(breakType);\n    };\n    const toggleCamera = async () => {\n        try {\n            const settings = await ChromeStorageService.getSettings();\n            const newCameraEnabled = !settings.cameraEnabled;\n            // If enabling camera, show permission popup\n            if (newCameraEnabled) {\n                setState(prev => ({\n                    ...prev,\n                    showCameraPermissionPopup: true\n                }));\n            }\n            else {\n                // If disabling camera, update settings directly\n                await ChromeStorageService.updateSettings({\n                    cameraEnabled: false\n                });\n                setState(prev => ({\n                    ...prev,\n                    cameraEnabled: false,\n                    showCameraPermissionPopup: false\n                }));\n            }\n        }\n        catch (error) {\n            console.error('Failed to toggle camera:', error);\n        }\n    };\n    const handleCameraPermissionApprove = async () => {\n        try {\n            await ChromeStorageService.updateSettings({\n                cameraEnabled: true,\n                metricsOnly: false\n            });\n            setState(prev => ({\n                ...prev,\n                cameraEnabled: true,\n                showCameraPermissionPopup: false,\n                isFeatureRestricted: false\n            }));\n        }\n        catch (error) {\n            console.error('Failed to approve camera access:', error);\n        }\n    };\n    const handleCameraPermissionReject = async () => {\n        try {\n            await ChromeStorageService.updateSettings({\n                cameraEnabled: false,\n                metricsOnly: true\n            });\n            setState(prev => ({\n                ...prev,\n                cameraEnabled: false,\n                showCameraPermissionPopup: false,\n                isFeatureRestricted: true\n            }));\n        }\n        catch (error) {\n            console.error('Failed to reject camera access:', error);\n        }\n    };\n    const handleLogin = async (email, password) => {\n        console.log('Login attempt:', { email });\n        try {\n            // Simulate API delay\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            // Get registered users from storage\n            const result = await chrome.storage.local.get(['eyezen_users']);\n            const users = result.eyezen_users || {};\n            // Check if user exists\n            if (!users[email]) {\n                throw new Error('No account found with this email address. Please sign up first.');\n            }\n            // Verify password\n            if (users[email].password !== password) {\n                throw new Error('Incorrect password. Please try again.');\n            }\n            // Successful login\n            setState(prev => ({\n                ...prev,\n                isLoggedIn: true,\n                userEmail: email,\n                showLoginModal: false\n            }));\n            // Store login state in Chrome storage\n            await chrome.storage.local.set({\n                'eyezen_login_state': {\n                    isLoggedIn: true,\n                    userEmail: email,\n                    loginTime: Date.now()\n                }\n            });\n        }\n        catch (error) {\n            // Re-throw the error to be handled by LoginModal\n            throw error;\n        }\n    };\n    const handleSignup = async (email, password, name) => {\n        console.log('Signup attempt:', { email, name });\n        try {\n            // Simulate API delay\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            // Get existing users from storage\n            const result = await chrome.storage.local.get(['eyezen_users']);\n            const users = result.eyezen_users || {};\n            // Check if user already exists\n            if (users[email]) {\n                throw new Error('An account with this email already exists. Please login instead.');\n            }\n            // Validate email format\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n            if (!emailRegex.test(email)) {\n                throw new Error('Please enter a valid email address.');\n            }\n            // Validate password strength\n            if (password.length < 6) {\n                throw new Error('Password must be at least 6 characters long.');\n            }\n            // Create new user\n            const newUser = {\n                email,\n                password,\n                name,\n                createdAt: Date.now(),\n                verified: true // Set to true after email verification\n            };\n            // Store user in users database\n            users[email] = newUser;\n            await chrome.storage.local.set({ 'eyezen_users': users });\n            // Successful signup - log them in\n            setState(prev => ({\n                ...prev,\n                isLoggedIn: true,\n                userEmail: email,\n                showLoginModal: false\n            }));\n            // Store login state\n            await chrome.storage.local.set({\n                'eyezen_login_state': {\n                    isLoggedIn: true,\n                    userEmail: email,\n                    loginTime: Date.now()\n                }\n            });\n        }\n        catch (error) {\n            // Re-throw the error to be handled by LoginModal\n            throw error;\n        }\n    };\n    if (state.isLoading) {\n        return (_jsx(\"div\", { className: \"w-[380px] h-[550px] bg-white flex items-center justify-center\", children: _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\" }), _jsx(\"p\", { className: \"text-gray-600\", children: \"Loading EyeZen...\" })] }) }));\n    }\n    return (_jsxs(_Fragment, { children: [state.showCameraPermissionPopup && (_jsx(CameraPermissionPopup, { isVisible: state.showCameraPermissionPopup, onApprove: handleCameraPermissionApprove, onReject: handleCameraPermissionReject, onClose: () => setState(prev => ({ ...prev, showCameraPermissionPopup: false })) })), _jsx(LoginModal, { isVisible: state.showLoginModal, onClose: () => setState(prev => ({ ...prev, showLoginModal: false })), onLogin: handleLogin, onSignup: handleSignup }), _jsxs(\"div\", { className: \"w-[380px] h-[550px] bg-white overflow-hidden flex flex-col\", children: [_jsxs(\"div\", { className: \"bg-gradient-to-r from-green-600 to-emerald-600 text-white p-4\", children: [_jsxs(\"div\", { className: \"flex items-center justify-between mb-3\", children: [_jsxs(\"div\", { className: \"flex items-center space-x-3\", children: [_jsx(\"div\", { className: \"text-2xl\", children: \"\\uD83D\\uDC41\\uFE0F\" }), _jsxs(\"div\", { children: [_jsx(\"h1\", { className: \"text-lg font-bold\", children: \"EyeZen\" }), _jsx(\"p\", { className: \"text-blue-100 text-xs opacity-90\", children: \"Eye Health Monitor\" })] })] }), state.isLoggedIn ? (_jsxs(\"div\", { className: \"flex items-center space-x-2\", children: [_jsx(\"span\", { className: \"text-xs text-blue-100 opacity-90 truncate max-w-20\", children: state.userEmail.split('@')[0] }), _jsx(\"button\", { onClick: async () => {\n                                                    await chrome.storage.local.remove(['eyezen_login_state']);\n                                                    setState(prev => ({ ...prev, isLoggedIn: false, userEmail: '' }));\n                                                }, className: \"p-1 hover:bg-white/20 rounded transition-colors\", title: \"Logout\", children: _jsx(\"svg\", { className: \"w-3 h-3\", fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", children: _jsx(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" }) }) })] })) : (_jsx(\"button\", { onClick: () => setState(prev => ({ ...prev, showLoginModal: true })), className: \"p-2 hover:bg-white/20 rounded-lg transition-colors\", title: \"Login\", children: _jsx(\"svg\", { className: \"w-4 h-4\", fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", children: _jsx(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" }) }) }))] }), _jsx(\"div\", { className: \"bg-white/10 backdrop-blur-sm rounded-lg p-3 border border-white/20\", children: _jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsxs(\"div\", { className: \"flex items-center space-x-3\", children: [_jsx(\"div\", { className: \"text-lg\", children: \"\\uD83D\\uDCF9\" }), _jsxs(\"div\", { children: [_jsx(\"div\", { className: \"font-semibold text-sm\", children: \"Camera Monitoring\" }), _jsx(\"div\", { className: \"text-xs text-blue-100 opacity-90\", children: state.cameraEnabled && !state.isFeatureRestricted ? 'Active - Tracking eye health' : 'Inactive - Limited features' })] })] }), _jsx(\"button\", { onClick: toggleCamera, className: `relative inline-flex h-6 w-11 items-center rounded-full transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white/50 ${state.cameraEnabled && !state.isFeatureRestricted ? 'bg-green-500 shadow-lg' : 'bg-white/30'}`, children: _jsx(\"span\", { className: `inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 shadow-md ${state.cameraEnabled && !state.isFeatureRestricted ? 'translate-x-6' : 'translate-x-1'}` }) })] }) })] }), _jsx(\"div\", { className: \"p-3\", children: _jsxs(\"div\", { className: \"text-center mb-3\", children: [_jsx(\"div\", { className: \"text-3xl mb-1\", children: getStatusIcon(state.status) }), _jsxs(\"h2\", { className: `text-base font-bold ${getScoreColor(state.eyeScore.current)}`, children: [\"Eye Health: \", state.eyeScore.current, \"/100\"] }), _jsxs(\"p\", { className: \"text-xs text-gray-600\", children: [state.streakDays, \" day streak \\u2022 \", formatLastBreakTime(state.lastBreakTime)] })] }) }), _jsxs(\"div\", { className: \"px-4 pb-4 flex-1\", children: [_jsx(\"div\", { className: \"mb-3 p-3 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg\", children: _jsxs(\"button\", { onClick: () => handleBreakClick(BreakType.MICRO), className: \"w-full px-4 py-2 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-lg hover:from-green-400 hover:to-emerald-400 transition-all duration-200 font-medium flex items-center justify-center space-x-2\", children: [_jsx(\"span\", { children: \"\\u26A1\" }), _jsx(\"span\", { children: \"Start Recommended Break with AI\" })] }) }), _jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"font-semibold text-gray-700 mb-2\", children: \"Choose Your Break\" }), _jsxs(\"div\", { className: \"grid grid-cols-3 gap-2\", children: [_jsxs(\"button\", { onClick: () => handleBreakClick(BreakType.MICRO), className: \"p-3 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-lg transition-colors duration-200 text-center border border-blue-200\", children: [_jsx(\"div\", { className: \"text-xl mb-1\", children: \"\\u26A1\" }), _jsx(\"div\", { className: \"text-xs font-medium\", children: \"Quick\" }), _jsx(\"div\", { className: \"text-xs opacity-70\", children: \"20 sec\" })] }), _jsxs(\"button\", { onClick: () => handleBreakClick(BreakType.SHORT), className: \"p-3 bg-green-50 hover:bg-green-100 text-green-700 rounded-lg transition-colors duration-200 text-center border border-green-200\", children: [_jsx(\"div\", { className: \"text-xl mb-1\", children: \"\\uD83E\\uDDD8\" }), _jsx(\"div\", { className: \"text-xs font-medium\", children: \"Eye Break\" }), _jsx(\"div\", { className: \"text-xs opacity-70\", children: \"5 min\" })] }), _jsxs(\"button\", { onClick: () => handleBreakClick(BreakType.LONG), className: \"p-3 bg-purple-50 hover:bg-purple-100 text-purple-700 rounded-lg transition-colors duration-200 text-center border border-purple-200\", children: [_jsx(\"div\", { className: \"text-xl mb-1\", children: \"\\uD83D\\uDC86\" }), _jsx(\"div\", { className: \"text-xs font-medium\", children: \"Wellness\" }), _jsx(\"div\", { className: \"text-xs opacity-70\", children: \"15 min\" })] })] })] }), _jsx(\"button\", { onClick: onOpenSettings, className: \"w-full mt-7 py-2 text-sm text-gray-600 hover:text-gray-800 transition-colors\", children: \"View detailed dashboard \\u2192\" })] })] })] }));\n};\nexport default Popup;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createRoot } from 'react-dom/client';\nimport Popup from './components/Popup';\nimport './styles/popup.css';\n// Initialize popup when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    const container = document.getElementById('popup-root');\n    if (!container) {\n        console.error('Popup root element not found');\n        return;\n    }\n    const root = createRoot(container);\n    const handleStartBreak = (breakType) => {\n        // Send message to background script to start break\n        chrome.runtime.sendMessage({\n            action: 'START_BREAK',\n            breakType: breakType\n        }, (response) => {\n            if (response?.success) {\n                // Close popup after starting break\n                window.close();\n            }\n            else {\n                console.error('Failed to start break:', response?.error);\n            }\n        });\n    };\n    const handleOpenSettings = () => {\n        // Open options page (dashboard)\n        chrome.runtime.openOptionsPage();\n        window.close();\n    };\n    root.render(_jsx(Popup, { onStartBreak: handleStartBreak, onOpenSettings: handleOpenSettings }));\n});\n// Handle any runtime errors\nwindow.addEventListener('error', (event) => {\n    console.error('Popup error:', event.error);\n});\nwindow.addEventListener('unhandledrejection', (event) => {\n    console.error('Popup unhandled promise rejection:', event.reason);\n});\n","// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"popup\": 0,\n\t\"ui_styles_popup_css\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkeyezen_chrome_extension\"] = self[\"webpackChunkeyezen_chrome_extension\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors\",\"core_storage_index_ts\",\"ui_styles_popup_css\"], () => (__webpack_require__(\"./ui/popup.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}
{"version":3,"file":"core_ai_chrome-ai-vision_ts.js","mappingssources":["webpack://eyezen-chrome-extension/./core/ai/chrome-ai-vision.ts"],"sourcesContent":["/**\n * Chrome AI Vision Service\n * Integrates Chrome's built-in AI with multimodal support for eye strain analysis\n * Uses Prompt API with image input to analyze camera feed and provide AI-powered insights\n */\nimport { ChromeAIService } from '../api/openai-service';\nexport class ChromeAIVisionService {\n    /**\n     * Initialize the Chrome AI Vision service\n     */\n    static async initialize() {\n        try {\n            // Use the centralized ChromeAIService initialization\n            await ChromeAIService.initialize();\n            this.isInitialized = true;\n            console.log('Chrome AI Vision service initialized successfully');\n            return true;\n        }\n        catch (error) {\n            console.error('Failed to initialize Chrome AI Vision service:', error);\n            return false;\n        }\n    }\n    /**\n     * Analyze eye strain from camera image using Chrome AI multimodal capabilities\n     */\n    static async analyzeEyeStrain(imageData, // Base64 encoded image\n    currentMetrics, contextInfo) {\n        try {\n            if (!this.isInitialized) {\n                await this.initialize();\n            }\n            const contextPrompt = this.buildContextPrompt(currentMetrics, contextInfo);\n            // Use ChromeAIService for multimodal analysis\n            const response = await ChromeAIService.promptWithImage(`${contextPrompt}\\n\\nPlease analyze this image for eye strain and fatigue indicators. Provide your assessment in the specified JSON format.`, imageData, {\n                temperature: this.VISION_TEMPERATURE,\n                topK: this.VISION_TOP_K\n            });\n            return this.parseAIResponse(response);\n        }\n        catch (error) {\n            console.error('Chrome AI vision analysis failed:', error);\n            return this.getFallbackAnalysis(currentMetrics);\n        }\n    }\n    /**\n     * Generate personalized recommendations based on AI analysis and user history\n     */\n    static async generatePersonalizedRecommendations(analysis, userHistory) {\n        try {\n            if (!this.isInitialized) {\n                return this.getDefaultRecommendations(analysis.strainLevel);\n            }\n            const prompt = `Based on the current eye strain analysis and user history, provide 3-5 personalized recommendations:\n\nCurrent Analysis:\n- Strain Level: ${analysis.strainLevel}/100\n- Fatigue Indicators: ${analysis.fatigueIndicators.join(', ')}\n- Blink Quality: ${analysis.blinkQuality}\n- Posture: ${analysis.postureAssessment}\n\nUser History:\n- Average Strain: ${userHistory.averageStrainLevel}/100\n- Common Issues: ${userHistory.commonIssues.join(', ')}\n- Preferred Breaks: ${userHistory.preferredBreakTypes.join(', ')}\n- Working Hours: ${userHistory.workingHours.start} - ${userHistory.workingHours.end}\n\nProvide actionable, personalized recommendations as a JSON array of strings.`;\n            const response = await ChromeAIService.prompt(prompt);\n            const recommendations = this.parseRecommendations(response);\n            return recommendations.length > 0 ? recommendations : this.getDefaultRecommendations(analysis.strainLevel);\n        }\n        catch (error) {\n            console.error('Failed to generate personalized recommendations:', error);\n            return this.getDefaultRecommendations(analysis.strainLevel);\n        }\n    }\n    /**\n     * Analyze a static image for eye strain and provide a score\n     * This method is designed for user-uploaded images\n     */\n    static async analyzeStaticImage(imageData, // Base64 encoded image or File object\n    options) {\n        try {\n            if (!this.isInitialized) {\n                await this.initialize();\n            }\n            const analysisPrompt = `You need to detect the eye strain score for this picture if it contains face and both eyes. The range is 0-100:\n   - 😊 for scores 80+ (excellent) \n   - 😐 for scores 60-79 (good) \n   - 😟 for scores 40-59 (moderate) \n   - 😵 for scores below 40 (poor)\n\nProvide your analysis in this JSON format:\n{\n  \"strainLevel\": 0-100,\n  \"fatigueIndicators\": [\"indicator1\", \"indicator2\"],\n  \"recommendations\": [\"recommendation1\", \"recommendation2\"],\n  \"blinkQuality\": \"poor|fair|good|excellent\",\n  \"postureAssessment\": \"description\",\n  \"confidenceScore\": 0-1,\n  \"detailedFindings\": {\n    \"eyeRedness\": 0-10,\n    \"eyelidDrooping\": 0-10,\n    \"overallFatigue\": 0-10,\n    \"postureScore\": 0-10\n  },\n  \"summary\": \"Brief summary of findings\"\n}`;\n            // Use ChromeAIService for multimodal analysis\n            const response = await ChromeAIService.promptWithImage(analysisPrompt, imageData, {\n                temperature: this.VISION_TEMPERATURE,\n                topK: this.VISION_TOP_K\n            });\n            const analysis = this.parseAIResponse(response);\n            // Calculate overall eye strain score based on analysis\n            const eyeStrainScore = this.calculateOverallStrainScore(analysis);\n            return {\n                eyeStrainScore,\n                confidence: analysis.confidenceScore,\n                analysis,\n                summary: this.generateAnalysisSummary(analysis, eyeStrainScore)\n            };\n        }\n        catch (error) {\n            console.error('Static image analysis failed:', error);\n            const fallbackAnalysis = this.getFallbackAnalysis();\n            return {\n                eyeStrainScore: 50, // Neutral score when analysis fails\n                confidence: 0.1,\n                analysis: fallbackAnalysis,\n                summary: 'Unable to analyze image. Please ensure the image shows a clear view of the face and eyes.'\n            };\n        }\n    }\n    /**\n     * Analyze trends and provide weekly insights\n     */\n    static async analyzeWeeklyTrends(weeklyData) {\n        try {\n            if (!this.isInitialized) {\n                return this.getDefaultWeeklyInsights();\n            }\n            const dataPrompt = `Analyze this week's eye health data and provide insights:\n\n${weeklyData.map(day => `${day.date}: Strain ${day.averageStrain}/100, ${day.breakCount} breaks, ${day.workingHours}h work`).join('\\n')}\n\nProvide analysis in JSON format:\n{\n  \"trends\": [\"trend1\", \"trend2\"],\n  \"insights\": [\"insight1\", \"insight2\"],\n  \"goalRecommendations\": [\"goal1\", \"goal2\"]\n}`;\n            const response = await ChromeAIService.prompt(dataPrompt);\n            return this.parseWeeklyAnalysis(response);\n        }\n        catch (error) {\n            console.error('Failed to analyze weekly trends:', error);\n            return this.getDefaultWeeklyInsights();\n        }\n    }\n    /**\n     * Clean up resources\n     */\n    static destroy() {\n        this.isInitialized = false;\n    }\n    // Private helper methods\n    static buildContextPrompt(metrics, context) {\n        let prompt = 'Context for analysis:';\n        if (metrics) {\n            prompt += `\\n- Current blink rate: ${metrics.blinkRate} blinks/min`;\n            prompt += `\\n- Fatigue index: ${metrics.fatigueIndex}/100`;\n            prompt += `\\n- Posture status: ${metrics.posture}`;\n            prompt += `\\n- EAR value: ${metrics.earValue}`;\n            prompt += `\\n- PERCLOS value: ${metrics.perclosValue}`;\n        }\n        if (context) {\n            prompt += `\\n- Session duration: ${Math.round(context.sessionDuration / 60)} minutes`;\n            prompt += `\\n- Breaks taken: ${context.breakCount}`;\n            prompt += `\\n- Time of day: ${context.timeOfDay}`;\n            if (context.screenBrightness) {\n                prompt += `\\n- Screen brightness: ${context.screenBrightness}%`;\n            }\n        }\n        return prompt;\n    }\n    static parseAIResponse(response) {\n        try {\n            // Extract JSON from response\n            const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n                const parsed = JSON.parse(jsonMatch[0]);\n                return {\n                    strainLevel: Math.max(0, Math.min(100, parsed.strainLevel || 50)),\n                    fatigueIndicators: Array.isArray(parsed.fatigueIndicators) ? parsed.fatigueIndicators : [],\n                    recommendations: Array.isArray(parsed.recommendations) ? parsed.recommendations : [],\n                    blinkQuality: ['poor', 'fair', 'good', 'excellent'].includes(parsed.blinkQuality)\n                        ? parsed.blinkQuality : 'fair',\n                    postureAssessment: parsed.postureAssessment || 'Unable to assess posture',\n                    confidenceScore: Math.max(0, Math.min(100, parsed.confidenceScore || 70))\n                };\n            }\n        }\n        catch (error) {\n            console.error('Failed to parse AI response:', error);\n        }\n        return this.getFallbackAnalysis();\n    }\n    static parseRecommendations(response) {\n        try {\n            const jsonMatch = response.match(/\\[[\\s\\S]*\\]/);\n            if (jsonMatch) {\n                const parsed = JSON.parse(jsonMatch[0]);\n                return Array.isArray(parsed) ? parsed : [];\n            }\n        }\n        catch (error) {\n            console.error('Failed to parse recommendations:', error);\n        }\n        return [];\n    }\n    static parseWeeklyAnalysis(response) {\n        try {\n            const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n                const parsed = JSON.parse(jsonMatch[0]);\n                return {\n                    trends: Array.isArray(parsed.trends) ? parsed.trends : [],\n                    insights: Array.isArray(parsed.insights) ? parsed.insights : [],\n                    goalRecommendations: Array.isArray(parsed.goalRecommendations) ? parsed.goalRecommendations : []\n                };\n            }\n        }\n        catch (error) {\n            console.error('Failed to parse weekly analysis:', error);\n        }\n        return this.getDefaultWeeklyInsights();\n    }\n    static getFallbackAnalysis(metrics) {\n        const strainLevel = metrics ? this.calculateBasicStrainLevel(metrics) : 50;\n        return {\n            strainLevel,\n            fatigueIndicators: strainLevel > 70 ? ['High strain detected', 'Reduced blink rate'] : ['Moderate activity'],\n            recommendations: this.getDefaultRecommendations(strainLevel),\n            blinkQuality: strainLevel > 70 ? 'poor' : strainLevel > 40 ? 'fair' : 'good',\n            postureAssessment: 'Unable to assess - using sensor data only',\n            confidenceScore: 60\n        };\n    }\n    static calculateBasicStrainLevel(metrics) {\n        let strain = 0;\n        // Blink rate analysis (normal: 15-20 blinks/min)\n        if (metrics.blinkRate < 10)\n            strain += 30;\n        else if (metrics.blinkRate < 15)\n            strain += 15;\n        // Fatigue index analysis\n        strain += metrics.fatigueIndex * 0.8; // Scale fatigue index to strain\n        // EAR (Eye Aspect Ratio) analysis - lower values indicate more closed eyes\n        if (metrics.earValue < 0.2)\n            strain += 25;\n        else if (metrics.earValue < 0.25)\n            strain += 10;\n        // PERCLOS analysis - higher values indicate more eye closure\n        strain += metrics.perclosValue * 0.3;\n        return Math.min(100, strain);\n    }\n    static getDefaultRecommendations(strainLevel) {\n        if (strainLevel > 80) {\n            return [\n                'Take an immediate 5-minute break',\n                'Practice the 20-20-20 rule',\n                'Adjust screen brightness and contrast',\n                'Check your posture and screen distance'\n            ];\n        }\n        else if (strainLevel > 60) {\n            return [\n                'Take a 2-minute break soon',\n                'Blink more frequently',\n                'Adjust your screen position'\n            ];\n        }\n        else {\n            return [\n                'Continue with regular break intervals',\n                'Maintain good posture'\n            ];\n        }\n    }\n    static getDefaultWeeklyInsights() {\n        return {\n            trends: ['Data analysis unavailable'],\n            insights: ['Chrome AI analysis not available'],\n            goalRecommendations: ['Enable Chrome AI for personalized insights']\n        };\n    }\n    /**\n     * Calculate overall strain score from AI analysis\n     */\n    static calculateOverallStrainScore(analysis) {\n        // Combine multiple factors to create an overall strain score\n        const strainLevel = analysis.strainLevel || 0;\n        const fatigueCount = analysis.fatigueIndicators?.length || 0;\n        const blinkQualityScore = this.getBlinkQualityScore(analysis.blinkQuality);\n        // Weight the different factors\n        const weightedScore = (strainLevel * 0.6 + // Primary strain level (60%)\n            (fatigueCount * 10) * 0.2 + // Fatigue indicators (20%)\n            blinkQualityScore * 0.2 // Blink quality (20%)\n        );\n        return Math.min(100, Math.max(0, Math.round(weightedScore)));\n    }\n    /**\n     * Convert blink quality to numeric score\n     */\n    static getBlinkQualityScore(quality) {\n        switch (quality) {\n            case 'excellent': return 0;\n            case 'good': return 25;\n            case 'fair': return 50;\n            case 'poor': return 75;\n            default: return 50;\n        }\n    }\n    /**\n     * Generate a human-readable summary of the analysis\n     */\n    static generateAnalysisSummary(analysis, strainScore) {\n        let summary = '';\n        if (strainScore <= 20) {\n            summary = '✅ Your eyes appear healthy with minimal signs of strain.';\n        }\n        else if (strainScore <= 40) {\n            summary = '⚠️ Mild eye strain detected. Consider taking short breaks.';\n        }\n        else if (strainScore <= 60) {\n            summary = '🟡 Moderate eye strain observed. Regular breaks recommended.';\n        }\n        else if (strainScore <= 80) {\n            summary = '🔶 Significant eye strain detected. Take a longer break soon.';\n        }\n        else {\n            summary = '🔴 High eye strain levels. Immediate rest recommended.';\n        }\n        if (analysis.fatigueIndicators && analysis.fatigueIndicators.length > 0) {\n            summary += ` Key concerns: ${analysis.fatigueIndicators.slice(0, 2).join(', ')}.`;\n        }\n        return summary;\n    }\n}\nChromeAIVisionService.isInitialized = false;\nChromeAIVisionService.VISION_TEMPERATURE = 0.3; // Lower for more consistent analysis\nChromeAIVisionService.VISION_TOP_K = 5;\n// Initialize the service\nChromeAIVisionService.initialize();\nexport default ChromeAIVisionService;\n"],"names":[],"sourceRoot":""}
"use strict";(self.webpackChunkeyezen_chrome_extension=self.webpackChunkeyezen_chrome_extension||[]).push([[552,764],{552:(e,t,n)=>{n.r(t),n.d(t,{ChromeAIVisionService:()=>i,default:()=>s});var a=n(764);class i{static async initialize(){try{return await a.ChromeAIService.initialize(),this.isInitialized=!0,console.log("Chrome AI Vision service initialized successfully"),!0}catch(e){return console.error("Failed to initialize Chrome AI Vision service:",e),!1}}static async analyzeEyeStrain(e,t,n){try{this.isInitialized||await this.initialize();const i=this.buildContextPrompt(t,n),s=await a.ChromeAIService.promptWithImage(`${i}\n\nPlease analyze this image for eye strain and fatigue indicators. Provide your assessment in the specified JSON format.`,e,{temperature:this.VISION_TEMPERATURE,topK:this.VISION_TOP_K});return this.parseAIResponse(s)}catch(e){return console.error("Chrome AI vision analysis failed:",e),this.getFallbackAnalysis(t)}}static async generatePersonalizedRecommendations(e,t){try{if(!this.isInitialized)return this.getDefaultRecommendations(e.strainLevel);const n=`Based on the current eye strain analysis and user history, provide 3-5 personalized recommendations:\n\nCurrent Analysis:\n- Strain Level: ${e.strainLevel}/100\n- Fatigue Indicators: ${e.fatigueIndicators.join(", ")}\n- Blink Quality: ${e.blinkQuality}\n- Posture: ${e.postureAssessment}\n\nUser History:\n- Average Strain: ${t.averageStrainLevel}/100\n- Common Issues: ${t.commonIssues.join(", ")}\n- Preferred Breaks: ${t.preferredBreakTypes.join(", ")}\n- Working Hours: ${t.workingHours.start} - ${t.workingHours.end}\n\nProvide actionable, personalized recommendations as a JSON array of strings.`,i=await a.ChromeAIService.prompt(n),s=this.parseRecommendations(i);return s.length>0?s:this.getDefaultRecommendations(e.strainLevel)}catch(t){return console.error("Failed to generate personalized recommendations:",t),this.getDefaultRecommendations(e.strainLevel)}}static async analyzeStaticImage(e,t){try{this.isInitialized||await this.initialize();const t='You need to detect the eye strain score for this picture if it contains face and both eyes. The range is 0-100:\n   - 😊 for scores 80+ (excellent) \n   - 😐 for scores 60-79 (good) \n   - 😟 for scores 40-59 (moderate) \n   - 😵 for scores below 40 (poor)\n\nProvide your analysis in this JSON format:\n{\n  "strainLevel": 0-100,\n  "fatigueIndicators": ["indicator1", "indicator2"],\n  "recommendations": ["recommendation1", "recommendation2"],\n  "blinkQuality": "poor|fair|good|excellent",\n  "postureAssessment": "description",\n  "confidenceScore": 0-1,\n  "detailedFindings": {\n    "eyeRedness": 0-10,\n    "eyelidDrooping": 0-10,\n    "overallFatigue": 0-10,\n    "postureScore": 0-10\n  },\n  "summary": "Brief summary of findings"\n}',n=await a.ChromeAIService.promptWithImage(t,e,{temperature:this.VISION_TEMPERATURE,topK:this.VISION_TOP_K}),i=this.parseAIResponse(n),s=this.calculateOverallStrainScore(i);return{eyeStrainScore:s,confidence:i.confidenceScore,analysis:i,summary:this.generateAnalysisSummary(i,s)}}catch(e){return console.error("Static image analysis failed:",e),{eyeStrainScore:50,confidence:.1,analysis:this.getFallbackAnalysis(),summary:"Unable to analyze image. Please ensure the image shows a clear view of the face and eyes."}}}static async analyzeWeeklyTrends(e){try{if(!this.isInitialized)return this.getDefaultWeeklyInsights();const t=`Analyze this week's eye health data and provide insights:\n\n${e.map(e=>`${e.date}: Strain ${e.averageStrain}/100, ${e.breakCount} breaks, ${e.workingHours}h work`).join("\n")}\n\nProvide analysis in JSON format:\n{\n  "trends": ["trend1", "trend2"],\n  "insights": ["insight1", "insight2"],\n  "goalRecommendations": ["goal1", "goal2"]\n}`,n=await a.ChromeAIService.prompt(t);return this.parseWeeklyAnalysis(n)}catch(e){return console.error("Failed to analyze weekly trends:",e),this.getDefaultWeeklyInsights()}}static destroy(){this.isInitialized=!1}static buildContextPrompt(e,t){let n="Context for analysis:";return e&&(n+=`\n- Current blink rate: ${e.blinkRate} blinks/min`,n+=`\n- Fatigue index: ${e.fatigueIndex}/100`,n+=`\n- Posture status: ${e.posture}`,n+=`\n- EAR value: ${e.earValue}`,n+=`\n- PERCLOS value: ${e.perclosValue}`),t&&(n+=`\n- Session duration: ${Math.round(t.sessionDuration/60)} minutes`,n+=`\n- Breaks taken: ${t.breakCount}`,n+=`\n- Time of day: ${t.timeOfDay}`,t.screenBrightness&&(n+=`\n- Screen brightness: ${t.screenBrightness}%`)),n}static parseAIResponse(e){try{const t=e.match(/\{[\s\S]*\}/);if(t){const e=JSON.parse(t[0]);return{strainLevel:Math.max(0,Math.min(100,e.strainLevel||50)),fatigueIndicators:Array.isArray(e.fatigueIndicators)?e.fatigueIndicators:[],recommendations:Array.isArray(e.recommendations)?e.recommendations:[],blinkQuality:["poor","fair","good","excellent"].includes(e.blinkQuality)?e.blinkQuality:"fair",postureAssessment:e.postureAssessment||"Unable to assess posture",confidenceScore:Math.max(0,Math.min(100,e.confidenceScore||70))}}}catch(e){console.error("Failed to parse AI response:",e)}return this.getFallbackAnalysis()}static parseRecommendations(e){try{const t=e.match(/\[[\s\S]*\]/);if(t){const e=JSON.parse(t[0]);return Array.isArray(e)?e:[]}}catch(e){console.error("Failed to parse recommendations:",e)}return[]}static parseWeeklyAnalysis(e){try{const t=e.match(/\{[\s\S]*\}/);if(t){const e=JSON.parse(t[0]);return{trends:Array.isArray(e.trends)?e.trends:[],insights:Array.isArray(e.insights)?e.insights:[],goalRecommendations:Array.isArray(e.goalRecommendations)?e.goalRecommendations:[]}}}catch(e){console.error("Failed to parse weekly analysis:",e)}return this.getDefaultWeeklyInsights()}static getFallbackAnalysis(e){const t=e?this.calculateBasicStrainLevel(e):50;return{strainLevel:t,fatigueIndicators:t>70?["High strain detected","Reduced blink rate"]:["Moderate activity"],recommendations:this.getDefaultRecommendations(t),blinkQuality:t>70?"poor":t>40?"fair":"good",postureAssessment:"Unable to assess - using sensor data only",confidenceScore:60}}static calculateBasicStrainLevel(e){let t=0;return e.blinkRate<10?t+=30:e.blinkRate<15&&(t+=15),t+=.8*e.fatigueIndex,e.earValue<.2?t+=25:e.earValue<.25&&(t+=10),t+=.3*e.perclosValue,Math.min(100,t)}static getDefaultRecommendations(e){return e>80?["Take an immediate 5-minute break","Practice the 20-20-20 rule","Adjust screen brightness and contrast","Check your posture and screen distance"]:e>60?["Take a 2-minute break soon","Blink more frequently","Adjust your screen position"]:["Continue with regular break intervals","Maintain good posture"]}static getDefaultWeeklyInsights(){return{trends:["Data analysis unavailable"],insights:["Chrome AI analysis not available"],goalRecommendations:["Enable Chrome AI for personalized insights"]}}static calculateOverallStrainScore(e){const t=.6*(e.strainLevel||0)+10*(e.fatigueIndicators?.length||0)*.2+.2*this.getBlinkQualityScore(e.blinkQuality);return Math.min(100,Math.max(0,Math.round(t)))}static getBlinkQualityScore(e){switch(e){case"excellent":return 0;case"good":return 25;case"fair":default:return 50;case"poor":return 75}}static generateAnalysisSummary(e,t){let n="";return n=t<=20?"✅ Your eyes appear healthy with minimal signs of strain.":t<=40?"⚠️ Mild eye strain detected. Consider taking short breaks.":t<=60?"🟡 Moderate eye strain observed. Regular breaks recommended.":t<=80?"🔶 Significant eye strain detected. Take a longer break soon.":"🔴 High eye strain levels. Immediate rest recommended.",e.fatigueIndicators&&e.fatigueIndicators.length>0&&(n+=` Key concerns: ${e.fatigueIndicators.slice(0,2).join(", ")}.`),n}}i.isInitialized=!1,i.VISION_TEMPERATURE=.3,i.VISION_TOP_K=5,i.initialize();const s=i},764:(e,t,n)=>{n.r(t),n.d(t,{ChromeAIService:()=>a,OpenAIService:()=>i,default:()=>s});class a{static async initialize(){try{if(!window.ai?.languageModel)return void console.warn("Chrome AI not available. AI features will use mock data.");const e=await window.ai.languageModel.capabilities();if("no"===e.available)return void console.warn("Chrome AI model not available. AI features will use mock data.");"after-download"===e.available&&console.log("Chrome AI model downloading..."),this.session=await window.ai.languageModel.create({temperature:this.DEFAULT_TEMPERATURE,topK:this.DEFAULT_TOP_K,monitor:e=>{e.addEventListener("downloadprogress",e=>{console.log(`Chrome AI model download progress: ${Math.round(100*e.loaded)}%`)})}}),this.isInitialized=!0,console.log("Chrome AI service initialized successfully")}catch(e){console.error("Failed to initialize Chrome AI service:",e)}}static async promptWithImage(e,t,n){try{if(await this.initialize(),!this.session)return console.warn("Chrome AI session not available for multimodal prompt"),"Chrome AI not available for image analysis";const n=[];return t&&n.push({role:"user",content:{type:"image",image:t}}),n.push({role:"user",content:e}),await this.session.prompt(n)}catch(e){return console.error("Chrome AI multimodal prompt failed:",e),"Unable to analyze image with Chrome AI"}}static async prompt(e,t){try{return await this.initialize(),this.session?await this.session.prompt(e):(console.warn("Chrome AI session not available for text prompt"),"Chrome AI not available")}catch(e){return console.error("Chrome AI text prompt failed:",e),"Unable to process request with Chrome AI"}}static async generateCoachingScript(e,t){try{if(!this.isInitialized||!this.session)return this.getMockCoachingScript(e,t.language);const n=this.buildCoachingPrompt(e,t),a="You are an expert eye health coach specializing in Traditional Chinese Medicine and modern ergonomics. Generate helpful, encouraging, and practical coaching scripts.",i=await this.session.prompt([{role:"system",content:a},{role:"user",content:n}]),s=i?.trim()||this.getMockCoachingScript(e,t.language).content;return{id:Date.now().toString(),type:e,content:s.substring(0,300),duration:this.estimateDuration(s),language:t.language,generated:Date.now()}}catch(n){return console.error("Failed to generate coaching script:",n),this.getMockCoachingScript(e,t.language)}}static async generateWeeklySummary(e){try{if(!this.isInitialized||!this.session)return this.getMockWeeklySummary(e);const t=Date.now()-6048e5,n=Date.now(),a=e.metrics.filter(e=>e.timestamp>=t),i=e.breaks.filter(e=>e.startTime>=t),s=this.buildWeeklySummaryPrompt({metrics:a,breaks:i,settings:e.settings,currentScore:e.score}),r="You are an eye health analyst. Analyze weekly data and provide actionable insights, improvements, and recommendations in a supportive tone.",o=await this.session.prompt([{role:"system",content:r},{role:"user",content:s}])||"",l=this.parseWeeklySummary(o);return{weekStart:t,weekEnd:n,totalBreaks:i.filter(e=>e.completed).length,averageEyeScore:e.score.weekly,fatigueEvents:a.filter(t=>t.fatigueIndex>e.settings.fatigueThreshold).length,improvements:l.improvements,recommendations:l.recommendations,generated:Date.now()}}catch(t){return console.error("Failed to generate weekly summary:",t),this.getMockWeeklySummary(e)}}static async translateText(e,t){try{if(!this.isInitialized||!this.session)return`[${t.toUpperCase()}] ${e}`;const n=`Translate the following text to ${t}. Maintain the tone and context, especially for health and wellness content: "${e}"`,a="You are a professional translator. Provide accurate translations while maintaining the original meaning and tone.",i=await this.session.prompt([{role:"system",content:a},{role:"user",content:n}]);return i?.trim()||e}catch(t){return console.error("Failed to translate text:",t),e}}static async rewriteText(e,t){try{if(!this.isInitialized||!this.session)return`[${t.toUpperCase()}] ${e}`;const n=`${{formal:"Rewrite this text in a formal, professional tone",casual:"Rewrite this text in a casual, friendly tone",encouraging:"Rewrite this text to be more encouraging and motivational",concise:"Rewrite this text to be more concise while keeping the key message"}[t]}. Maintain the original meaning and context: "${e}"`,a="You are a skilled writer. Rewrite text according to the specified style while preserving the original meaning.",i=await this.session.prompt([{role:"system",content:a},{role:"user",content:n}]);return i?.trim()||e}catch(t){return console.error("Failed to rewrite text:",t),e}}static destroy(){if(this.session){try{this.session.destroy()}catch(e){console.error("Error destroying Chrome AI session:",e)}this.session=null,this.isInitialized=!1}}static buildCoachingPrompt(e,t){const n=`Current fatigue level: ${t.fatigueLevel}%, breaks taken today: ${t.breakCount}, time: ${t.timeOfDay}`;switch(e){case"motivation":return`Generate a motivational message for someone taking an eye break. ${n}. Keep it under 50 words, encouraging, and focused on eye health benefits.`;case"instruction":return`Generate clear instructions for eye exercises during a break. ${n}. Include specific techniques like the 20-20-20 rule or TCM massage points. Keep it under 60 words.`;case"relaxation":return`Generate a calming, mindful message for relaxation during an eye break. ${n}. Focus on breathing, mindfulness, and letting go of screen tension. Keep it under 50 words.`;default:return`Generate a helpful eye health message. ${n}.`}}static buildWeeklySummaryPrompt(e){return`Analyze this week's eye health data and provide insights:\n\nMetrics: ${e.metrics.length} readings, average fatigue: ${e.metrics.reduce((e,t)=>e+t.fatigueIndex,0)/e.metrics.length||0}%\nBreaks: ${e.breaks.length} total, ${e.breaks.filter(e=>e.completed).length} completed\nCurrent eye score: ${e.currentScore.current}\nSettings: ${e.settings.reminderInterval}min intervals, ${e.settings.dailyBreakGoal} daily goal\n\nProvide:\n1. 2-3 key improvements this week\n2. 2-3 actionable recommendations\n\nFormat as JSON: {"improvements": ["..."], "recommendations": ["..."]}`}static parseWeeklySummary(e){try{const t=JSON.parse(e);return{improvements:t.improvements||[],recommendations:t.recommendations||[]}}catch{const t=e.match(/improvements?[:\s]*([^\n]*)/gi)?.[0]?.split(",")||[],n=e.match(/recommendations?[:\s]*([^\n]*)/gi)?.[0]?.split(",")||[];return{improvements:t.slice(0,3),recommendations:n.slice(0,3)}}}static estimateDuration(e){const t=e.split(" ").length;return Math.max(Math.ceil(t/200*60),10)}static getMockCoachingScript(e,t){const n={motivation:{en:"Great job taking this break! Your eyes will thank you for this moment of rest. Every break brings you closer to better eye health.",zh:"很好，你正在休息！你的眼睛会感谢你给它们这个休息的时刻。每次休息都让你更接近更好的眼部健康。",es:"¡Excelente trabajo tomando este descanso! Tus ojos te agradecerán este momento de descanso. Cada pausa te acerca a una mejor salud ocular."},instruction:{en:"Look at something 20 feet away for 20 seconds. Blink slowly and deliberately. Gently massage the temples in circular motions.",zh:"看向20英尺外的物体20秒钟。缓慢而有意识地眨眼。轻柔地以圆周运动按摩太阳穴。",es:"Mira algo a 20 pies de distancia durante 20 segundos. Parpadea lenta y deliberadamente. Masajea suavemente las sienes con movimientos circulares."},relaxation:{en:"Take a deep breath and let your shoulders drop. Feel the tension leaving your eye muscles. You are giving yourself the gift of rest.",zh:"深呼吸，让肩膀放松下来。感受眼部肌肉的紧张感消失。你正在给自己休息的礼物。",es:"Respira profundamente y deja caer los hombros. Siente cómo la tensión abandona los músculos de tus ojos. Te estás dando el regalo del descanso."}},a=n[e][t]||n[e].en;return{id:Date.now().toString(),type:e,content:a,duration:this.estimateDuration(a),language:t,generated:Date.now()}}static getMockWeeklySummary(e){return{weekStart:Date.now()-6048e5,weekEnd:Date.now(),totalBreaks:e.breaks.filter(e=>e.completed).length,averageEyeScore:e.score.weekly,fatigueEvents:e.metrics.filter(t=>t.fatigueIndex>e.settings.fatigueThreshold).length,improvements:["Maintained consistent break schedule","Reduced peak fatigue incidents","Improved overall eye score trend"],recommendations:["Continue with regular 20-20-20 breaks","Consider adjusting screen brightness in the evening","Try the TCM massage techniques during longer breaks"],generated:Date.now()}}}a.session=null,a.isInitialized=!1,a.DEFAULT_TEMPERATURE=.7,a.DEFAULT_TOP_K=3,a.initialize();const i=a,s=a}}]);
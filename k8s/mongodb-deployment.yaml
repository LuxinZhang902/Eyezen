apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: eyezen
  labels:
    app: mongodb
    component: database
spec:
  serviceName: mongodb-headless
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        component: database
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      containers:
      - name: mongodb
        image: mongo:6
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 27017
          name: mongodb
          protocol: TCP
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: eyezen-secrets
              key: mongodb-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: eyezen-secrets
              key: mongodb-password
        - name: MONGO_INITDB_DATABASE
          value: "eyezen"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-init-config
      nodeSelector:
        kubernetes.io/os: linux
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
      labels:
        app: mongodb
        component: database
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: fast-ssd
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: eyezen
  labels:
    app: mongodb
    component: database
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: mongodb
    protocol: TCP
    name: mongodb
  selector:
    app: mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-headless
  namespace: eyezen
  labels:
    app: mongodb
    component: database
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 27017
    targetPort: mongodb
    protocol: TCP
    name: mongodb
  selector:
    app: mongodb
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-config
  namespace: eyezen
  labels:
    app: mongodb
    component: database
data:
  mongo-init.js: |
    // Initialize EyeZen database
    db = db.getSiblingDB('eyezen');
    
    // Create collections with validation
    db.createCollection('users', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['userId', 'settings', 'createdAt'],
          properties: {
            userId: { bsonType: 'string' },
            settings: { bsonType: 'object' },
            metrics: { bsonType: 'array' },
            breaks: { bsonType: 'array' },
            events: { bsonType: 'array' },
            score: { bsonType: 'object' },
            createdAt: { bsonType: 'date' },
            updatedAt: { bsonType: 'date' }
          }
        }
      }
    });
    
    db.createCollection('sessions', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['sessionId', 'userId', 'createdAt'],
          properties: {
            sessionId: { bsonType: 'string' },
            userId: { bsonType: 'string' },
            data: { bsonType: 'object' },
            expiresAt: { bsonType: 'date' },
            createdAt: { bsonType: 'date' }
          }
        }
      }
    });
    
    db.createCollection('analytics', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['type', 'data', 'timestamp'],
          properties: {
            type: { bsonType: 'string' },
            userId: { bsonType: 'string' },
            data: { bsonType: 'object' },
            timestamp: { bsonType: 'date' }
          }
        }
      }
    });
    
    // Create indexes for performance
    db.users.createIndex({ 'userId': 1 }, { unique: true });
    db.users.createIndex({ 'updatedAt': 1 });
    db.sessions.createIndex({ 'sessionId': 1 }, { unique: true });
    db.sessions.createIndex({ 'userId': 1 });
    db.sessions.createIndex({ 'expiresAt': 1 }, { expireAfterSeconds: 0 });
    db.analytics.createIndex({ 'userId': 1, 'timestamp': -1 });
    db.analytics.createIndex({ 'type': 1, 'timestamp': -1 });
    
    print('EyeZen database initialized successfully');
{"version":3,"file":"ui_components_BreakDetailModal_tsx.js","mappingssources":["webpack://eyezen-chrome-extension/./ui/components/BreakDetailModal.tsx"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useEffect, useRef } from 'react';\nimport { BreakType } from '../../types/index';\nconst BREAK_INFO = {\n    [BreakType.MICRO]: {\n        title: 'Quick Break',\n        duration: 20,\n        icon: '⚡',\n        description: 'A quick 20-second eye exercise to refresh your vision and reduce strain.',\n        instructions: [\n            'Look away from your screen',\n            'Focus on an object 20 feet away',\n            'Blink slowly and deliberately',\n            'Take a deep breath and relax'\n        ],\n        benefits: [\n            'Reduces eye strain',\n            'Prevents dry eyes',\n            'Improves focus',\n            'Quick refresh'\n        ],\n        color: {\n            primary: 'yellow-500',\n            secondary: 'orange-400',\n            gradient: 'from-yellow-300 to-orange-400'\n        }\n    },\n    [BreakType.SHORT]: {\n        title: 'Eye Break',\n        duration: 300, // 5 minutes\n        icon: '👁️',\n        description: 'A comprehensive 5-minute break with eye exercises and relaxation techniques.',\n        instructions: [\n            'Follow the 20-20-20 rule',\n            'Perform gentle eye movements',\n            'Practice blinking exercises',\n            'Do neck and shoulder stretches',\n            'Hydrate with water'\n        ],\n        benefits: [\n            'Deep eye relaxation',\n            'Improved circulation',\n            'Reduced muscle tension',\n            'Better posture',\n            'Enhanced productivity'\n        ],\n        color: {\n            primary: 'green-500',\n            secondary: 'emerald-400',\n            gradient: 'from-green-400 to-emerald-500'\n        }\n    },\n    [BreakType.LONG]: {\n        title: 'Wellness Break',\n        duration: 900, // 15 minutes\n        icon: '🧘',\n        description: 'A complete 15-minute wellness session with meditation, exercises, and eye care.',\n        instructions: [\n            'Step away from your workspace',\n            'Practice mindful breathing',\n            'Do comprehensive eye exercises',\n            'Perform TCM acupressure massage',\n            'Take a short walk if possible',\n            'Hydrate and have a healthy snack'\n        ],\n        benefits: [\n            'Complete eye restoration',\n            'Stress reduction',\n            'Improved mental clarity',\n            'Better circulation',\n            'Enhanced well-being',\n            'Increased energy'\n        ],\n        color: {\n            primary: 'purple-500',\n            secondary: 'indigo-400',\n            gradient: 'from-purple-400 to-indigo-500'\n        }\n    }\n};\nconst BreakDetailModal = ({ isOpen, breakType, onClose, onStartBreak }) => {\n    const [timerState, setTimerState] = useState({\n        isRunning: false,\n        timeRemaining: 0,\n        totalTime: 0,\n        isCompleted: false\n    });\n    const timerRef = useRef(null);\n    const audioRef = useRef(null);\n    const breakInfo = breakType ? BREAK_INFO[breakType] : null;\n    useEffect(() => {\n        if (breakType && breakInfo) {\n            setTimerState({\n                isRunning: false,\n                timeRemaining: breakInfo.duration,\n                totalTime: breakInfo.duration,\n                isCompleted: false\n            });\n        }\n    }, [breakType, breakInfo]);\n    useEffect(() => {\n        return () => {\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n            }\n        };\n    }, []);\n    const formatTime = (seconds) => {\n        const mins = Math.floor(seconds / 60);\n        const secs = seconds % 60;\n        return `${mins}:${secs.toString().padStart(2, '0')}`;\n    };\n    const startTimer = () => {\n        setTimerState(prev => ({ ...prev, isRunning: true }));\n        timerRef.current = setInterval(() => {\n            setTimerState(prev => {\n                if (prev.timeRemaining <= 1) {\n                    // Timer completed\n                    if (timerRef.current) {\n                        clearInterval(timerRef.current);\n                    }\n                    playCompletionSound();\n                    return {\n                        ...prev,\n                        timeRemaining: 0,\n                        isRunning: false,\n                        isCompleted: true\n                    };\n                }\n                return {\n                    ...prev,\n                    timeRemaining: prev.timeRemaining - 1\n                };\n            });\n        }, 1000);\n    };\n    const pauseTimer = () => {\n        if (timerRef.current) {\n            clearInterval(timerRef.current);\n        }\n        setTimerState(prev => ({ ...prev, isRunning: false }));\n    };\n    const resetTimer = () => {\n        if (timerRef.current) {\n            clearInterval(timerRef.current);\n        }\n        setTimerState(prev => ({\n            ...prev,\n            isRunning: false,\n            timeRemaining: prev.totalTime,\n            isCompleted: false\n        }));\n    };\n    const playCompletionSound = () => {\n        // Create a simple beep sound\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        oscillator.frequency.value = 800;\n        oscillator.type = 'sine';\n        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);\n        oscillator.start(audioContext.currentTime);\n        oscillator.stop(audioContext.currentTime + 0.5);\n    };\n    const handleStartBreak = () => {\n        if (breakType) {\n            onStartBreak(breakType);\n            onClose();\n        }\n    };\n    const getProgressPercentage = () => {\n        if (timerState.totalTime === 0)\n            return 0;\n        return ((timerState.totalTime - timerState.timeRemaining) / timerState.totalTime) * 100;\n    };\n    if (!isOpen || !breakType || !breakInfo) {\n        return null;\n    }\n    return (_jsx(\"div\", { className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\", children: _jsxs(\"div\", { className: \"bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto\", children: [_jsxs(\"div\", { className: `bg-gradient-to-br ${breakInfo.color.gradient} p-6 rounded-t-2xl text-white relative`, children: [_jsx(\"button\", { onClick: onClose, className: \"absolute top-4 right-4 text-white hover:text-gray-200 transition-colors\", children: _jsx(\"svg\", { className: \"w-6 h-6\", fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", children: _jsx(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M6 18L18 6M6 6l12 12\" }) }) }), _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"text-4xl mb-2\", children: breakInfo.icon }), _jsx(\"h2\", { className: \"text-2xl font-bold mb-2\", children: breakInfo.title }), _jsx(\"p\", { className: \"text-white/90 text-sm\", children: breakInfo.description })] })] }), _jsx(\"div\", { className: \"p-6 border-b border-gray-200\", children: _jsxs(\"div\", { className: \"text-center mb-4\", children: [_jsx(\"div\", { className: \"text-4xl font-bold text-gray-800 mb-2\", children: formatTime(timerState.timeRemaining) }), _jsx(\"div\", { className: \"w-full bg-gray-200 rounded-full h-3 mb-4\", children: _jsx(\"div\", { className: `bg-gradient-to-r ${breakInfo.color.gradient} h-3 rounded-full transition-all duration-1000`, style: { width: `${getProgressPercentage()}%` } }) }), _jsxs(\"div\", { className: \"flex justify-center space-x-3\", children: [!timerState.isRunning && !timerState.isCompleted && (_jsxs(\"button\", { onClick: startTimer, className: `px-6 py-2 bg-${breakInfo.color.primary} text-white rounded-lg hover:bg-${breakInfo.color.secondary} transition-colors flex items-center space-x-2`, children: [_jsx(\"svg\", { className: \"w-4 h-4\", fill: \"currentColor\", viewBox: \"0 0 20 20\", children: _jsx(\"path\", { fillRule: \"evenodd\", d: \"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\", clipRule: \"evenodd\" }) }), _jsx(\"span\", { children: \"Start\" })] })), timerState.isRunning && (_jsxs(\"button\", { onClick: pauseTimer, className: \"px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors flex items-center space-x-2\", children: [_jsx(\"svg\", { className: \"w-4 h-4\", fill: \"currentColor\", viewBox: \"0 0 20 20\", children: _jsx(\"path\", { fillRule: \"evenodd\", d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\", clipRule: \"evenodd\" }) }), _jsx(\"span\", { children: \"Pause\" })] })), _jsxs(\"button\", { onClick: resetTimer, className: \"px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors flex items-center space-x-2\", children: [_jsx(\"svg\", { className: \"w-4 h-4\", fill: \"currentColor\", viewBox: \"0 0 20 20\", children: _jsx(\"path\", { fillRule: \"evenodd\", d: \"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\", clipRule: \"evenodd\" }) }), _jsx(\"span\", { children: \"Reset\" })] })] }), timerState.isCompleted && (_jsx(\"div\", { className: \"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\", children: _jsxs(\"div\", { className: \"flex items-center justify-center space-x-2 text-green-800\", children: [_jsx(\"svg\", { className: \"w-5 h-5\", fill: \"currentColor\", viewBox: \"0 0 20 20\", children: _jsx(\"path\", { fillRule: \"evenodd\", d: \"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\", clipRule: \"evenodd\" }) }), _jsx(\"span\", { className: \"font-medium\", children: \"Break completed! Great job!\" })] }) }))] }) }), _jsxs(\"div\", { className: \"p-6 border-b border-gray-200\", children: [_jsx(\"h3\", { className: \"text-lg font-semibold text-gray-800 mb-3\", children: \"Instructions\" }), _jsx(\"ul\", { className: \"space-y-2\", children: breakInfo.instructions.map((instruction, index) => (_jsxs(\"li\", { className: \"flex items-start space-x-2 text-sm text-gray-600\", children: [_jsx(\"span\", { className: `w-5 h-5 rounded-full bg-${breakInfo.color.primary} text-white text-xs flex items-center justify-center flex-shrink-0 mt-0.5`, children: index + 1 }), _jsx(\"span\", { children: instruction })] }, index))) })] }), _jsxs(\"div\", { className: \"p-6 border-b border-gray-200\", children: [_jsx(\"h3\", { className: \"text-lg font-semibold text-gray-800 mb-3\", children: \"Benefits\" }), _jsx(\"div\", { className: \"grid grid-cols-2 gap-2\", children: breakInfo.benefits.map((benefit, index) => (_jsxs(\"div\", { className: \"flex items-center space-x-2 text-sm text-gray-600\", children: [_jsx(\"svg\", { className: `w-4 h-4 text-${breakInfo.color.primary}`, fill: \"currentColor\", viewBox: \"0 0 20 20\", children: _jsx(\"path\", { fillRule: \"evenodd\", d: \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\", clipRule: \"evenodd\" }) }), _jsx(\"span\", { children: benefit })] }, index))) })] }), _jsxs(\"div\", { className: \"p-6 flex space-x-3\", children: [_jsx(\"button\", { onClick: handleStartBreak, className: `flex-1 bg-gradient-to-r ${breakInfo.color.gradient} text-white py-3 px-4 rounded-lg hover:shadow-lg transition-all duration-200 font-medium`, children: \"Start Full Break Session\" }), _jsx(\"button\", { onClick: onClose, className: \"px-6 py-3 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors\", children: \"Close\" })] })] }) }));\n};\nexport default BreakDetailModal;\n"],"names":[],"sourceRoot":""}
let faceLandmarker=null,isInitialized=!1;async function initializeMediaPipe(){try{let e,i;if(console.log("Initializing MediaPipe..."),console.log("🔄 Attempting to load MediaPipe modules..."),"undefined"!=typeof importScripts){console.log("📦 Loading vision bundle from local assets...");const a=await import("./vision_bundle.js");console.log("📦 Vision bundle loaded:",Object.keys(a)),e=a.FilesetResolver,i=a.FaceLandmarker}else{console.log("📦 Loading from @mediapipe/tasks-vision package...");const a=await import("@mediapipe/tasks-vision");e=a.FilesetResolver,i=a.FaceLandmarker}if(console.log("🔍 MediaPipe classes loaded:",{FilesetResolver:!!e,FaceLandmarker:!!i}),!e||!i)throw new Error("MediaPipe classes not available.");const a=await e.forVisionTasks("./assets/wasm");faceLandmarker=await i.createFromOptions(a,{baseOptions:{modelAssetPath:"https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task",delegate:"GPU"},outputFaceBlendshapes:!0,runningMode:"VIDEO",numFaces:1,minFaceDetectionConfidence:.5,minFacePresenceConfidence:.5,minTrackingConfidence:.5}),isInitialized=!0,console.log("MediaPipe initialized successfully")}catch(e){throw console.error("Failed to initialize MediaPipe:",e),e}}function detectForVideo(e,i){if(!isInitialized||!faceLandmarker)return console.log("⚠️ MediaPipe not initialized yet"),{faceLandmarks:[]};try{const a=faceLandmarker.detectForVideo(e,i);return a.faceLandmarks&&a.faceLandmarks.length>0&&console.log("👤 Face detected! Received eye metrics:",{facesDetected:a.faceLandmarks.length,landmarksCount:a.faceLandmarks[0].length}),a}catch(e){return console.error("Face detection error:",e),{faceLandmarks:[]}}}const MediaPipeWorkerLoader={async loadVisionTasks(){try{return console.log("🚀 Loading real MediaPipe Vision Tasks..."),await initializeMediaPipe(),console.log("✅ MediaPipe Vision Tasks loaded successfully"),{initializeMediaPipe,detectForVideo}}catch(e){throw console.error("❌ Failed to load MediaPipe Vision Tasks:",e),e}}};"undefined"!=typeof module&&module.exports?module.exports=MediaPipeWorkerLoader:globalThis.MediaPipeWorkerLoader=MediaPipeWorkerLoader;
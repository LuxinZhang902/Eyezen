"use strict";(self.webpackChunkeyezen_chrome_extension=self.webpackChunkeyezen_chrome_extension||[]).push([[911],{911:(e,t,a)=>{a.r(t),a.d(t,{DailyKPICalculator:()=>r,EyeHealthScorer:()=>n,WeeklySummaryGenerator:()=>s});class n{static calculateScore(e){if(0===e.length)return{overall:50,components:{eyeStrain:50,blinkHealth:50,postureHealth:50,fatigueLevel:50},trend:"stable",recommendations:["Start monitoring your eye health"]};const t=e[e.length-1],a=this.calculateAverages(e.slice(-10)),n=this.calculateEyeStrainScore(a.earValue,a.perclosValue),r=this.calculateBlinkHealthScore(a.blinkRate),s=this.calculatePostureScore(t.posture),i=Math.max(0,Math.min(100,100-a.fatigueIndex));console.log("🔍 EyeHealthScorer: Component scores:",{eyeStrainScore:n,blinkHealthScore:r,postureScore:s,fatigueScore:i,avgMetrics:a,latest:t.posture});const l=50,o=n/100*(this.WEIGHTS.EAR+this.WEIGHTS.PERCLOS)*l+s/100*this.WEIGHTS.POSTURE*l+i/100*this.WEIGHTS.FATIGUE*l,c=Math.round(50+o);console.log("🔍 EyeHealthScorer: Base score calculation:",{baseScore:50,improvementRange:l,eyeStrainContribution:(n/100*(this.WEIGHTS.EAR+this.WEIGHTS.PERCLOS)*l).toFixed(1),postureContribution:(s/100*this.WEIGHTS.POSTURE*l).toFixed(1),fatigueContribution:(i/100*this.WEIGHTS.FATIGUE*l).toFixed(1),totalImprovement:o.toFixed(1),finalScore:c});const u=this.calculateTrend(e),h=this.generateRecommendations({eyeStrain:n,blinkHealth:r,postureHealth:s,fatigueLevel:i});return{overall:Math.max(50,Math.min(100,c)),components:{eyeStrain:n,blinkHealth:r,postureHealth:s,fatigueLevel:i},trend:u,recommendations:h}}static calculateAverages(e){const t=e.reduce((e,t)=>({earValue:e.earValue+t.earValue,perclosValue:e.perclosValue+t.perclosValue,blinkRate:e.blinkRate+t.blinkRate,fatigueIndex:e.fatigueIndex+t.fatigueIndex}),{earValue:0,perclosValue:0,blinkRate:0,fatigueIndex:0}),a=e.length;return{earValue:t.earValue/a,perclosValue:t.perclosValue/a,blinkRate:t.blinkRate/a,fatigueIndex:t.fatigueIndex/a}}static calculateEyeStrainScore(e,t){const a=this.scoreByThreshold(e,this.THRESHOLDS.EAR,!0),n=this.scoreByThreshold(t,this.THRESHOLDS.PERCLOS,!1);return Math.round((a+n)/2)}static calculateBlinkHealthScore(e){const t=this.THRESHOLDS.BLINK_RATE,a=(t.EXCELLENT.min+t.EXCELLENT.max)/2;if(e>=t.EXCELLENT.min&&e<=t.EXCELLENT.max){const n=Math.abs(e-a)/(t.EXCELLENT.max-a);return Math.round(100-5*n)}if(e>=t.GOOD.min&&e<=t.GOOD.max){const a=e<t.EXCELLENT.min?(t.EXCELLENT.min-e)/(t.EXCELLENT.min-t.GOOD.min):(e-t.EXCELLENT.max)/(t.GOOD.max-t.EXCELLENT.max);return Math.round(95-25*a)}if(e>=t.FAIR.min&&e<=t.FAIR.max){const a=e<t.GOOD.min?(t.GOOD.min-e)/(t.GOOD.min-t.FAIR.min):(e-t.GOOD.max)/(t.FAIR.max-t.GOOD.max);return Math.round(70-30*a)}{const a=Math.max(Math.abs(e-t.FAIR.min),Math.abs(e-t.FAIR.max)),n=Math.min(a/20,1);return Math.round(40-40*n)}}static calculatePostureScore(e){const t=()=>Math.floor(6*Math.random())-3;switch(e){case"excellent":return Math.min(100,Math.max(92,97+t()));case"good":return Math.min(91,Math.max(75,83+t()));case"fair":return Math.min(74,Math.max(55,65+t()));case"poor":return Math.min(54,Math.max(25,40+t()));case"very_poor":return Math.min(24,Math.max(0,15+t()));default:return Math.min(60,Math.max(40,50+t()))}}static scoreByThreshold(e,t,a){if(a){if(e>=t.EXCELLENT){const a=Math.min((e-t.EXCELLENT)/(.2*t.EXCELLENT),1);return Math.round(90+10*a)}if(e>=t.GOOD){const a=(e-t.GOOD)/(t.EXCELLENT-t.GOOD);return Math.round(70+20*a)}if(e>=t.FAIR){const a=(e-t.FAIR)/(t.GOOD-t.FAIR);return Math.round(40+30*a)}const a=Math.max(0,e/t.FAIR);return Math.round(40*a)}{if(e<=t.EXCELLENT){const a=Math.max(0,1-e/t.EXCELLENT);return Math.round(90+10*a)}if(e<=t.GOOD){const a=1-(e-t.EXCELLENT)/(t.GOOD-t.EXCELLENT);return Math.round(70+20*a)}if(e<=t.FAIR){const a=1-(e-t.GOOD)/(t.FAIR-t.GOOD);return Math.round(40+30*a)}const a=Math.min((e-t.FAIR)/(2*t.FAIR),1);return Math.round(40-40*a)}}static calculateTrend(e){if(e.length<5)return"stable";const t=e.slice(-5),a=e.slice(-10,-5);if(0===a.length)return"stable";const n=t.reduce((e,t)=>e+(1-t.fatigueIndex),0)/t.length-a.reduce((e,t)=>e+(1-t.fatigueIndex),0)/a.length;return n>.05?"improving":n<-.05?"declining":"stable"}static generateRecommendations(e){const t=[];return e.eyeStrain<60&&(t.push("Take more frequent breaks to reduce eye strain"),t.push("Adjust screen brightness and contrast")),e.blinkHealth<60&&(t.push("Practice conscious blinking exercises"),t.push("Use artificial tears if eyes feel dry")),e.postureHealth<60&&(t.push("Improve your sitting posture"),t.push("Adjust monitor height to eye level")),e.fatigueLevel<60&&(t.push("Get adequate sleep (7-9 hours)"),t.push("Take longer breaks between work sessions")),0===t.length&&t.push("Great job! Keep maintaining healthy eye habits"),t}}n.WEIGHTS={EAR:.3,PERCLOS:.35,BLINK_RATE:0,POSTURE:.25,FATIGUE:.1},n.THRESHOLDS={EAR:{EXCELLENT:.25,GOOD:.2,FAIR:.15,POOR:.1},PERCLOS:{EXCELLENT:.15,GOOD:.25,FAIR:.35,POOR:.5},BLINK_RATE:{EXCELLENT:{min:15,max:20},GOOD:{min:12,max:25},FAIR:{min:8,max:30},POOR:{min:0,max:50}}};class r{static calculateDailyKPIs(e,t,a=new Date){const r=new Date(a);r.setHours(0,0,0,0);const s=new Date(a);s.setHours(23,59,59,999);const i=e.filter(e=>{const t=new Date(e.timestamp);return t>=r&&t<=s}),l=t.filter(e=>{const t=new Date(e.startTime);return t>=r&&t<=s}),o=i.length>0?Math.round(30*i.length/60):0,c=l.length,u=l.filter(e=>e.completed).length,h=l.reduce((e,t)=>e+(t.duration||0),0),m=i.length>0?{earValue:i.reduce((e,t)=>e+t.earValue,0)/i.length,perclosValue:i.reduce((e,t)=>e+t.perclosValue,0)/i.length,blinkRate:i.reduce((e,t)=>e+t.blinkRate,0)/i.length,fatigueIndex:i.reduce((e,t)=>e+t.fatigueIndex,0)/i.length}:null,E=n.calculateScore(i);return{date:a.toISOString().split("T")[0],screenTime:o,totalBreaks:c,completedBreaks:u,breakCompletionRate:c>0?u/c*100:0,totalBreakTime:h,averageMetrics:m,eyeHealthScore:E.overall,recommendations:E.recommendations,alerts:this.generateAlerts(m,c,o)}}static generateAlerts(e,t,a){const n=[];return a>480&&n.push("Excessive screen time detected"),t<3&&a>120&&n.push("Take more frequent breaks"),e&&e.fatigueIndex>.7&&n.push("High fatigue levels detected"),e&&e.perclosValue>.3&&n.push("Excessive eye closure detected"),n}}class s{static generateWeeklySummary(e,t,a){const n=new Date(a);n.setDate(n.getDate()+6),n.setHours(23,59,59,999);const s=[];for(let n=0;n<7;n++){const i=new Date(a);i.setDate(i.getDate()+n);const l=r.calculateDailyKPIs(e,t,i);s.push(l)}const i=s.reduce((e,t)=>e+t.screenTime,0),l=s.reduce((e,t)=>e+t.totalBreaks,0),o=s.reduce((e,t)=>e+t.eyeHealthScore,0)/7,c=this.calculateWeeklyTrend(s.map(e=>e.eyeHealthScore)),u=this.calculateWeeklyTrend(s.map(e=>e.screenTime));return{weekStart:a.toISOString().split("T")[0],weekEnd:n.toISOString().split("T")[0],dailyKPIs:s,summary:{totalScreenTime:i,avgDailyScreenTime:Math.round(i/7),totalBreaks:l,avgEyeHealthScore:Math.round(o),eyeHealthTrend:c,screenTimeTrend:u},insights:this.generateWeeklyInsights(s)}}static calculateWeeklyTrend(e){if(e.length<2)return"stable";const t=e.slice(0,Math.floor(e.length/2)),a=e.slice(Math.floor(e.length/2)),n=t.reduce((e,t)=>e+t,0)/t.length,r=a.reduce((e,t)=>e+t,0)/a.length-n,s=.1*n;return r>s?"improving":r<-s?"declining":"stable"}static generateWeeklyInsights(e){const t=[],a=e.reduce((e,t)=>t.eyeHealthScore>e.eyeHealthScore?t:e),n=e.reduce((e,t)=>t.eyeHealthScore<e.eyeHealthScore?t:e);return t.push(`Best eye health day: ${new Date(a.date).toLocaleDateString("en-US",{weekday:"long"})}`),t.push(`Most challenging day: ${new Date(n.date).toLocaleDateString("en-US",{weekday:"long"})}`),e.reduce((e,t)=>e+t.screenTime,0)/7>360&&t.push("Consider reducing daily screen time"),e.filter(e=>e.breakCompletionRate>70).length<5&&t.push("Try to maintain consistent break habits throughout the week"),t}}}}]);